{"version":3,"file":"static/js/561.c0ce5b4c.chunk.js","mappings":"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","sources":["components/TradingViewWidget.tsx","components/InstrumentChartPage.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { useGlueTheme } from \"./../util/glue\";\n\ninterface TVWidget {\n    options: Record<string, any>;\n    subscribeToQuote: (cb: (quote: { short_name: string; description: string; exchange: string; }) => void) => void;\n    reload: () => void;\n  }\n\ninterface TradingViewWidgetProps {\n    symbol?: string;\n    onSymbolChange: (symbol: {\n        symbol: string; \n        description: string; \n        exchange: string;\n    }) => void;\n}\n\nconst TradingViewWidget = ({ symbol, onSymbolChange }: TradingViewWidgetProps) => {\n\n    const chartRef = useRef<{ widget?: TVWidget, lastUserSelection?: string; }>({ lastUserSelection: undefined });\n    const theme = useGlueTheme();\n\n    useEffect(() => {\n        if (chartRef.current.widget == null) {\n          const tvWidget = createTradingWidget({ \n              symbol: symbol ?? '', \n              theme \n            });\n\n          chartRef.current = {\n            widget: tvWidget\n          };\n    \n          (window as any).tvWidget = tvWidget;\n    \n          tvWidget.subscribeToQuote((quote: any) => {\n    \n            const { short_name, description, exchange } = quote;\n    \n            if (chartRef.current.lastUserSelection === short_name) {\n              chartRef.current.lastUserSelection = short_name;\n              return;\n            }\n    \n            chartRef.current.lastUserSelection = short_name;\n    \n            console.warn('Publish quote -> ', quote);\n            onSymbolChange({\n              symbol: short_name,\n              exchange, \n              description\n            });\n          });\n        }\n      }, [symbol, theme, onSymbolChange]);\n\n      useEffect(() => {\n        const widget = chartRef.current?.widget;\n        if (widget && typeof theme === 'string') {\n    \n          console.log('[TradingViewWidget] theme changed. Will reload widget...');\n    \n          try {\n            widget.options.theme = theme;\n            widget.reload();\n          } catch (error) {\n            console.error('[TradingViewWidget] failed to reload the widget. Error: ', error);\n          }\n        }\n      }, [theme])\n\n      useEffect(() => {\n        const widget = chartRef.current?.widget;\n        const symbolChangedOutside = typeof symbol === 'string' && symbol.length > 0 && symbol !== chartRef.current.lastUserSelection;\n        if (widget && symbolChangedOutside) {\n    \n          console.log('[TradingViewWidget] symbol changed. Will reload widget...');\n    \n          try {\n            widget.options.symbol = symbol;\n            widget.reload();\n          } catch (error) {\n            console.error('[TradingViewWidget] failed to reload the widget. Error: ', error);\n          }\n        }\n      }, [symbol]);\n\n    return (\n        <div className=\"tradingview-widget-container d-flex flex-column flex-fill\">\n            <div id=\"tradingview-widget\" className=\"d-flex flex-column flex-fill\"></div>\n            <div className=\"tradingview-widget-copyright\">\n                <a\n                    href={`https://www.tradingview.com/symbols/NASDAQ-${symbol}/`}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                >\n                    <span className=\"blue-text\">{symbol} Chart</span>\n                </a>{\" \"}\n                by TradingView\n            </div>\n        </div>\n    );\n};\n\nexport default TradingViewWidget;\n\nfunction createTradingWidget({ symbol, theme }: { symbol: string, theme: string }) {\n    return new (window as any).TradingView.widget({\n        symbol,\n        theme,\n        autosize: true,\n        interval: \"D\",\n        timezone: \"Etc/UTC\",\n        style: \"1\",\n        locale: \"en\",\n        toolbar_bg: \"#f1f3f6\",\n        enable_publishing: false,\n        allow_symbol_change: true,\n        container_id: \"tradingview-widget\",\n    });\n}\n","import { useCallback, useEffect, useState } from 'react'\n\nimport TradingViewWidget from './TradingViewWidget'\nimport { useAddIntentListenerInstrument } from './../util/glue'\nimport useInstrumentDetailsContext from '../hooks/useInstrumentDetailsContext'\nimport { useMorningStarSync } from '../hooks/useMorningStarSync'\nimport { ViewChartIntent } from '../constants'\n\nconst useInstrumentSymbol = () => {\n    const [instrumentSymbol, setInstrumentSymbol] = useState<\n        string | undefined\n    >()\n    const {\n        instrumentContext: { id },\n        publish,\n    } = useInstrumentDetailsContext()\n    const { syncInstrument } = useMorningStarSync()\n\n    useEffect(() => {\n        if (id?.ticker) {\n            setInstrumentSymbol(id.ticker)\n        }\n    }, [id])\n\n    const setSymbol = useCallback(\n        ({\n            ticker,\n            BBG_EXCHANGE,\n        }: {\n            ticker: string\n            BBG_EXCHANGE: string\n        }) => {\n            publish({\n                ticker,\n                BBG_EXCHANGE,\n            })\n\n            setInstrumentSymbol(ticker)\n            syncInstrument(ticker)\n        },\n        [publish, setInstrumentSymbol, syncInstrument]\n    )\n\n    useAddIntentListenerInstrument(ViewChartIntent, setSymbol)\n\n    return {\n        symbol: instrumentSymbol,\n        setSymbol,\n    }\n}\n\nexport default function InstrumentChartPage(): JSX.Element {\n    const { symbol, setSymbol } = useInstrumentSymbol()\n\n    return (\n        <>\n            <TradingViewWidget\n                symbol={symbol}\n                onSymbolChange={({ symbol }) =>\n                    setSymbol({ ticker: symbol, BBG_EXCHANGE: 'LN' })\n                }\n            />\n        </>\n    )\n}\n"],"names":["symbol","onSymbolChange","chartRef","useRef","lastUserSelection","undefined","theme","useGlueTheme","useEffect","current","widget","tvWidget","window","TradingView","autosize","interval","timezone","style","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","createTradingWidget","subscribeToQuote","quote","short_name","description","exchange","console","warn","log","options","reload","error","symbolChangedOutside","length","className","id","href","rel","target","InstrumentChartPage","useState","instrumentSymbol","setInstrumentSymbol","useInstrumentDetailsContext","instrumentContext","publish","syncInstrument","useMorningStarSync","ticker","setSymbol","useCallback","BBG_EXCHANGE","useAddIntentListenerInstrument","ViewChartIntent","useInstrumentSymbol"],"sourceRoot":""}