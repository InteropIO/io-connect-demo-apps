{"version":3,"file":"static/js/982.ca840d08.chunk.js","mappings":"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","sources":["components/NewOrderForm.tsx","hooks/useClients.ts","hooks/useOrderTypes.ts","hooks/useOrderValidity.ts"],"sourcesContent":["import { useCallback, useEffect, useState, useContext, useMemo } from 'react'\nimport { Row, Col, Form, FormGroup, Button, Label, Input } from 'reactstrap'\nimport '@glue42/theme/dist/packages/rc-select.css'\nimport Select from 'react-select'\nimport CreatableSelect from 'react-select/creatable'\nimport '../css/NewOrderForm.css'\nimport '../css/Grids.css'\n\nimport 'react-datetime/css/react-datetime.css'\nimport '@glue42/theme/dist/packages/rc-rdt.css'\nimport { OrderInfo } from '../models/orders'\nimport { Fdc3Order } from '../models/fdc3-order'\nimport { GlueContext } from '@glue42/react-hooks'\nimport { METHODNAME_CREATE_ORDER } from '../constants/methods'\nimport { useInstruments } from '../hooks/useInstruments'\nimport { useOrderTypes } from '../hooks/useOrderTypes'\nimport { useOrderValidity } from '../hooks/useOrderValidity'\nimport { useOrderSides } from '../hooks/useOrderSides'\nimport { useClients } from '../hooks/useClients'\nimport { formatInstrument, getExchange, getTicker } from '../util/util'\nimport Validation from './Validation'\nimport { ClientInfo } from '../models/clients'\nimport { ACME_SETTINGS_CONTEXT_NAME } from '../constants/settings'\nimport { AcmeSettingsContext } from '../models/acmeSettings'\n\nconst convertFdc3OrderToOmsOrder = (\n    fOrder: Fdc3Order,\n    clients: ClientInfo[]\n): OrderInfo => {\n    console.log('ORDER:', fOrder)\n    const client = clients.find((c) => c.email === fOrder?.contact?.id?.email)\n\n    const clientId = client ? client.clientId : fOrder?.contact?.name\n\n    const order: OrderInfo = {\n        side: fOrder?.side as any,\n        quantity: fOrder?.quantity as any,\n        orderType: fOrder?.orderType as any,\n        limitPrice: isLimitPriceEnabled(fOrder?.orderType || '')\n            ? (fOrder?.limitPrice as any)\n            : null,\n        timeInForce: fOrder?.timeInForce as any,\n        expireTime: fOrder?.expireTime\n            ? new Date(fOrder.expireTime)\n            : undefined,\n        comments: fOrder?.notes as any,\n        instrument: {\n            ticker: getTicker(fOrder?.instrument?.id)?.toUpperCase(),\n            bbgExchange: getExchange(fOrder?.instrument?.id)?.toUpperCase(),\n        },\n        clientId: clientId || '',\n        // dummy values follow\n        orderId: 0,\n        dateCreated: new Date(),\n        quantityFilled: 0,\n        averagePrice: 0,\n        currency: 'GBX',\n        tradeStatus: '',\n        brokerId: '',\n    }\n\n    return order\n}\n\nconst isValidInteger = (myInt: string) => {\n    return parseInt(myInt?.trim(), 10)?.toString() === myInt?.trim()\n}\n\nconst getIntegerBorderClass = (myInt: string) => {\n    if (!myInt) return ''\n    if (!isValidInteger(myInt) || myInt === '0') return 'border-danger'\n    return ''\n}\n\nconst isLimitPriceEnabled = (orderType: string) => {\n    if (\n        !orderType ||\n        orderType === '1' // market\n    ) {\n        return false\n    }\n    return true\n}\n\nconst isExpireTimeEnabled = (timeInForce: string) => {\n    if (\n        !timeInForce ||\n        timeInForce === '0' || // DAY\n        timeInForce === '1' || // GTC\n        timeInForce === '3' || // IOC\n        timeInForce === '4' // FOK\n    ) {\n        return false\n    }\n    return true\n}\n\ninterface ComboOption {\n    value: string\n    label: string\n    meta?: any\n}\n\nconst NewOrderForm = (props: NewOrderFormProps): JSX.Element => {\n    console.log('NewOrderForm()')\n    //const [,setRNUM] = useState(0)\n    const [selectedSide, setSelectedSide] = useState<ComboOption>(null as any)\n    const [quantity, setQuantity] = useState('')\n    const [selectedSecurity, setSelectedSecurity] = useState<ComboOption>(\n        null as any\n    )\n    const [clientId, setClientId] = useState<ComboOption | undefined>()\n    const [selectedOrderType, setSelectedOrderType] = useState<ComboOption>(\n        null as any\n    )\n    const [limitPrice, setLimitPrice] = useState('')\n    const [selectedValidity, setSelectedValidity] = useState<ComboOption>(\n        null as any\n    )\n    const [expireTime, setExpireTime] = useState<Date | undefined>(undefined)\n    const [comments, setComments] = useState('')\n    const [showValidation, setShowValidation] = useState(false)\n    const instruments = useInstruments()\n    const orderTypes = useOrderTypes()\n    const orderValidity = useOrderValidity()\n    const orderSides = useOrderSides()\n    const clients = useClients()\n\n    const securityIdOptions: ComboOption[] = useMemo(() => {\n        return instruments\n            ? instruments\n                  .map(({ ticker, bbgExchange }) => ({\n                      value: formatInstrument(ticker, bbgExchange),\n                      label: formatInstrument(ticker, bbgExchange),\n                      meta: {\n                          ticker,\n                          bbgExchange,\n                      },\n                  }))\n                  .sort((a, b) => (a.value < b.value ? -1 : 1))\n            : []\n    }, [instruments])\n\n    const orderTypeOptions: ComboOption[] = useMemo(() => {\n        console.log(orderTypes)\n        return orderTypes\n            ? Object.entries(orderTypes)\n                  .filter(([, val]) => (val as any).enabled)\n                  .map(([key, val]) => ({\n                      value: key,\n                      label: (val as any).displayName,\n                  }))\n            : []\n    }, [orderTypes])\n\n    const validityOptions: ComboOption[] = useMemo(() => {\n        return orderValidity\n            ? Object.entries(orderValidity)\n                  .filter(([, val]) => (val as any).enabled)\n                  .map(([key, val]) => ({\n                      value: key,\n                      label: (val as any).displayName,\n                  }))\n            : []\n    }, [orderValidity])\n\n    const sideOptions: ComboOption[] = useMemo(() => {\n        return orderSides\n            ? Object.entries(orderSides)\n                  .filter(([, val]) => val.enabled)\n                  .map(([key, val]) => ({\n                      value: key,\n                      label: val.displayName,\n                  }))\n            : []\n    }, [orderSides])\n\n    const clientOptions: ComboOption[] = useMemo(\n        () =>\n            clients\n                ? clients.map(({ clientId }) => ({\n                      value: clientId,\n                      label: clientId,\n                  }))\n                : [],\n        [clients]\n    )\n\n    const glue = useContext(GlueContext)\n\n    const setFromOrderInfo = useCallback(\n        (info: OrderInfo | undefined) => {\n            setSelectedSide(\n                (sideOptions?.find((opt) => opt.value === info?.side) ||\n                    null) as ComboOption\n            )\n\n            setQuantity(info?.quantity?.toString() || '')\n\n            const foundSecurity = securityIdOptions?.find((opt) => {\n                return opt.meta.ticker === info?.instrument?.ticker\n            })\n\n            if (foundSecurity) {\n                setSelectedSecurity(foundSecurity)\n            } else if (info?.instrument) {\n                setSelectedSecurity({\n                    label: formatInstrument(\n                        info.instrument.ticker,\n                        info.instrument.bbgExchange\n                    ),\n                    value: formatInstrument(\n                        info.instrument.ticker,\n                        info.instrument.bbgExchange\n                    ),\n                    meta: info.instrument,\n                })\n            } else {\n                setSelectedSecurity(null as any)\n            }\n\n            if (info?.clientId) {\n                setClientId({\n                    label: info?.clientId,\n                    value: info?.clientId,\n                })\n            }\n\n            setSelectedOrderType(\n                orderTypeOptions.find((opt) => opt.value === info?.orderType) ||\n                    (orderTypeOptions.find((opt) => opt.value === '1') as any) // default to market order\n            )\n\n            setLimitPrice(info?.limitPrice?.toString() || '')\n\n            setSelectedValidity(\n                validityOptions.find(\n                    (opt) => opt.value === info?.timeInForce\n                ) || (validityOptions.find((opt) => opt.value === '0') as any) // default to day\n                // null) as ComboOption\n            )\n\n            setExpireTime(\n                info?.expireTime ||\n                    //|| DateEndOfDay(new Date())\n                    undefined\n            )\n\n            setComments(info?.comments || '')\n        },\n        [sideOptions, securityIdOptions, orderTypeOptions, validityOptions]\n    )\n\n    const setFromFdc3Order = useCallback(\n        (order: Fdc3Order) => {\n            setFromOrderInfo(convertFdc3OrderToOmsOrder(order, clients))\n        },\n        [setFromOrderInfo, clients]\n    )\n\n    useEffect(() => {\n        console.log('useEffect()', props.intentOrder)\n        setFromFdc3Order(props.intentOrder as Fdc3Order)\n    }, [props.intentOrder, setFromFdc3Order])\n\n    useEffect(() => {\n        if (limitPrice && !isLimitPriceEnabled(selectedOrderType.value)) {\n            setLimitPrice('')\n        }\n    }, [selectedOrderType, limitPrice])\n\n    const getOrderInfo = async (): Promise<OrderInfo> => {\n        const acmeSettings: AcmeSettingsContext = await glue?.contexts.get(\n            ACME_SETTINGS_CONTEXT_NAME\n        )\n        const dateCreated = new Date(\n            Date.now() + (acmeSettings.mockTimeOffset || 0)\n        )\n        const result: OrderInfo = {\n            side: selectedSide?.value,\n            quantity: parseInt(quantity, 10),\n            orderType: selectedOrderType?.value,\n            limitPrice: parseFloat(limitPrice),\n            timeInForce: selectedValidity?.value,\n            expireTime,\n            comments,\n            instrument: selectedSecurity?.meta,\n            clientId: clientId?.value ?? '',\n            // dummy values follow\n            orderId: 0,\n            dateCreated,\n            quantityFilled: 0,\n            averagePrice: 0,\n            currency: 'GBX',\n            tradeStatus: '',\n            brokerId: '',\n        }\n        return result\n    }\n\n    const getValidationMessage = (): JSX.Element | null => {\n        const messages: string[] = []\n        if (!selectedSide?.value) {\n            messages.push('Trade side not selected')\n        }\n        if (!isValidInteger(quantity) || quantity === '0') {\n            messages.push('Quantity is invalid')\n        }\n        if (!selectedSecurity?.value) {\n            messages.push('Security Id missing')\n        }\n        if (!clientId) {\n            messages.push('Client Id missing')\n        }\n        if (!selectedOrderType?.value) {\n            messages.push('Order type not selected')\n        }\n        if (\n            isLimitPriceEnabled(selectedOrderType?.value) &&\n            (!limitPrice || !isValidInteger(limitPrice))\n        ) {\n            messages.push('Limit price missing')\n        }\n\n        if (!selectedValidity?.value) {\n            messages.push('Order validity not specified')\n        }\n        if (isExpireTimeEnabled(selectedValidity?.value) && !expireTime) {\n            messages.push('Expire date/time not specified')\n        }\n\n        if (messages.length === 0) {\n            return null\n        }\n        return (\n            <Validation\n                messages={messages}\n                onClose={() => setShowValidation(false)}\n            ></Validation>\n        )\n    }\n\n    const onSave = async () => {\n        const vMessage = getValidationMessage()\n        if (vMessage) {\n            setShowValidation(true)\n            return\n        }\n        const order = await getOrderInfo()\n        glue?.interop.invoke(METHODNAME_CREATE_ORDER, { order })\n        props.onComplete?.({ action: 'save' })\n    }\n\n    const onCancel = () => {\n        props.onComplete?.({ action: 'cancel' })\n    }\n\n    const limitPriceEnabled = isLimitPriceEnabled(selectedOrderType?.value)\n    const limitPriceClassName = limitPriceEnabled\n        ? getIntegerBorderClass(limitPrice)\n        : ''\n\n    const form: JSX.Element = (\n        <Form className=\"\">\n            <Row>\n                <Col className=\"nof-control-column\">\n                    <FormGroup className=\"d-flex align-items-baseline mt-1\">\n                        <Label className=\"mr-3\">Side</Label>\n                        <Button\n                            className=\"mr-1\"\n                            style={{ position: 'relative' }}\n                            onClick={() => {\n                                setSelectedSide(\n                                    sideOptions.find(\n                                        (opt) => opt.value === '1'\n                                    ) || (null as any)\n                                )\n                            }}\n                        >\n                            B\n                            <div className=\"og-cell-side og-cell-buy\" />\n                        </Button>\n                        <Button\n                            className=\"mr-1\"\n                            style={{ position: 'relative' }}\n                            onClick={() => {\n                                setSelectedSide(\n                                    sideOptions.find(\n                                        (opt) => opt.value === '2'\n                                    ) || (null as any)\n                                )\n                            }}\n                        >\n                            S\n                            <div className=\"og-cell-side og-cell-sell\" />\n                        </Button>\n                        <Select\n                            classNamePrefix=\"select\"\n                            className=\"flex-grow-1\"\n                            id={'side'}\n                            name={'side'}\n                            value={selectedSide}\n                            options={sideOptions}\n                            onChange={(event) => setSelectedSide(event as any)}\n                        />\n                    </FormGroup>\n                    <Row className=\"align-items-baseline mt-1\">\n                        <Label className=\"nof-label col-xs-4 col-2 mr-3\">\n                            Quantity\n                        </Label>\n                        <Col className=\"ml-3\">\n                            <Input\n                                type=\"text\"\n                                className={getIntegerBorderClass(quantity)}\n                                id={'quantity'}\n                                name={'quantity'}\n                                autoComplete={'off'}\n                                value={quantity}\n                                onChange={(event) =>\n                                    setQuantity(event.target.value)\n                                }\n                            />\n                        </Col>\n                    </Row>\n                    <Row className=\"align-items-baseline mt-1\">\n                        <Label className=\"nof-label col-2 mr-3\">\n                            Security&nbsp;Id\n                        </Label>\n                        <Col className=\"ml-3\">\n                            <CreatableSelect\n                                classNamePrefix=\"select\"\n                                id={'securityId'}\n                                name={'securityId'}\n                                value={selectedSecurity}\n                                options={securityIdOptions}\n                                onChange={(event) =>\n                                    setSelectedSecurity(event as any)\n                                }\n                            />\n                        </Col>\n                    </Row>\n                    <Row className=\"align-items-baseline mt-1\">\n                        <Label className=\"nof-label col-2 mr-3\">\n                            Client&nbsp;Id\n                        </Label>\n                        <Col className=\"ml-3\">\n                            <Select\n                                classNamePrefix=\"select\"\n                                id=\"clientId\"\n                                name=\"clientId\"\n                                value={clientId}\n                                options={clientOptions}\n                                onChange={(event) => {\n                                    setClientId(event as ComboOption)\n                                }}\n                            />\n                        </Col>\n                    </Row>\n                </Col>\n                <Col className=\"nof-control-column\">\n                    <Row className=\"align-items-baseline mt-1\">\n                        <Label className=\"nof-label col-2 mr-3\">\n                            Order&nbsp;Type\n                        </Label>\n                        <Col className=\"ml-3\">\n                            <Select\n                                classNamePrefix=\"select\"\n                                id={'orderType'}\n                                name={'orderType'}\n                                value={selectedOrderType}\n                                options={orderTypeOptions}\n                                onChange={(event) =>\n                                    setSelectedOrderType(event as any)\n                                }\n                            />\n                        </Col>\n                    </Row>\n                    <Row className=\"align-items-baseline mt-1\">\n                        <Label\n                            className={\n                                'nof-label col-2 mr-3 ' +\n                                (limitPriceEnabled ? '' : ' nof-label-disabled')\n                            }\n                        >\n                            Limit&nbsp;Price\n                        </Label>\n                        <Col className=\"ml-3\">\n                            <Input\n                                className={limitPriceClassName}\n                                type=\"text\"\n                                disabled={!limitPriceEnabled}\n                                id={'price'}\n                                name={'price'}\n                                autoComplete={'off'}\n                                value={limitPrice}\n                                onChange={(event) =>\n                                    setLimitPrice(event.target.value)\n                                }\n                            />\n                        </Col>\n                    </Row>\n                    <Row className=\"align-items-baseline mt-1\">\n                        <Label className=\"nof-label col-2 mr-3\">Validity</Label>\n                        <Col className=\"ml-3\">\n                            <Select\n                                classNamePrefix=\"select\"\n                                id={'timeInForce'}\n                                name={'timeInForce'}\n                                value={selectedValidity}\n                                options={validityOptions}\n                                onChange={(event) =>\n                                    setSelectedValidity(event as any)\n                                }\n                            />\n                        </Col>\n                    </Row>\n                    {/* <Row className=\"align-items-baseline mt-1\">\n                        <Label\n                            className={\n                                'nof-label' +\n                                (expireTimeEnabled ? '' : ' nof-label-disabled')\n                            }\n                        >\n                            Expire&nbsp;Time\n                        </Label>\n                        <Col>\n                            <Datetime\n                                value={expireTime}\n                                dateFormat={\n                                    expireTimeEnabled\n                                        ? expireTime\n                                            ? 'YYYY-MM-DD'\n                                            : '[Click to select]'\n                                        : '[]'\n                                }\n                                timeFormat={\n                                    expireTimeEnabled && expireTime\n                                        ? 'HH:mm:ss'\n                                        : '[]'\n                                }\n                                closeOnSelect={true}\n                                inputProps={{\n                                    style: {},\n                                    disabled: !expireTimeEnabled,\n                                    placeholder: expireTimeEnabled\n                                        ? 'Click to select'\n                                        : '',\n                                    readOnly: true,\n                                }}\n                                onChange={(date) =>\n                                    setExpireTime(new Date(date.valueOf()))\n                                }\n                            />\n                        </Col>\n                    </Row> */}\n                </Col>\n            </Row>\n            <Row>&nbsp;</Row>\n            <Row>\n                <Label className=\"nof-label col-1 mr-3\">\n                    Additional Instructions\n                </Label>\n                <Col className=\"ml-3\">\n                    <Input\n                        type=\"textarea\"\n                        className=\"nof-textarea\"\n                        rows={2}\n                        resize={'vertical'}\n                        id={'comments'}\n                        name={'comments'}\n                        value={comments}\n                        onChange={(event) => setComments(event.target.value)}\n                    />\n                </Col>\n            </Row>\n            {showValidation ? getValidationMessage() : null}\n            <Row>&nbsp;</Row>\n            <Row className=\"d-flex justify-content-center\">\n                <Button className=\"col-2 mr-2\" onClick={onSave}>\n                    Send\n                </Button>\n                {/* <div className='col-1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div> */}\n                <Button className=\"col-2 mr-2\" onClick={onCancel}>\n                    Cancel\n                </Button>\n                {/* <div className='col-1'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div> */}\n                <Button\n                    className=\"col-2\"\n                    onClick={() => setFromOrderInfo({} as any)}\n                >\n                    Clear\n                </Button>\n            </Row>\n        </Form>\n    )\n\n    return form\n}\nexport default NewOrderForm\n\nexport interface NewOrderFormResult {\n    action: 'save' | 'cancel'\n}\n\nexport interface NewOrderFormProps {\n    intentOrder?: Fdc3Order\n    onComplete?: (result: NewOrderFormResult) => void\n}\n","import { GlueContext } from '@glue42/react-hooks'\nimport { useContext, useEffect, useState } from 'react'\nimport { METHODNAME_GET_CLIENTS } from '../constants/methods'\nimport { ClientInfo } from '../models/clients'\n\nexport const useClients = (): ClientInfo[] => {\n    const glue = useContext(GlueContext)\n    const [clients, setClients] = useState<ClientInfo[]>([])\n\n    useEffect(() => {\n        glue.interop\n            .invoke(METHODNAME_GET_CLIENTS)\n            .then((result) => setClients(result.returned?.clients))\n            .catch((error) => {\n                console.error(\n                    `Failed invoking ${METHODNAME_GET_CLIENTS}. Error: `,\n                    error\n                )\n            })\n    }, [glue])\n\n    return clients\n}\n","import { GlueContext } from '@glue42/react-hooks'\nimport { useContext, useEffect, useState } from 'react'\nimport { METHODNAME_GET_ORDER_TYPES } from '../constants/methods'\n\nexport const useOrderTypes = (): any => {\n    const glue = useContext(GlueContext)\n    const [orderTypes, setOrderTypes] = useState()\n\n    useEffect(() => {\n        glue.interop\n            .invoke(METHODNAME_GET_ORDER_TYPES)\n            .then((result) => setOrderTypes(result.returned.orderTypes))\n            .catch((error) => {\n                console.error(\n                    `Failed invoking ${METHODNAME_GET_ORDER_TYPES}. Error: `,\n                    error\n                )\n            })\n    }, [glue])\n\n    return orderTypes\n}\n","import { GlueContext } from '@glue42/react-hooks'\nimport { useContext, useEffect, useState } from 'react'\nimport { METHODNAME_GET_ORDER_VALIDITY } from '../constants/methods'\n\nexport const useOrderValidity = (): any => {\n    const glue = useContext(GlueContext)\n    const [orderValidity, setOrderValidity] = useState()\n\n    useEffect(() => {\n        glue.interop\n            .invoke(METHODNAME_GET_ORDER_VALIDITY)\n            .then((result) => setOrderValidity(result.returned.orderValidity))\n            .catch((error) => {\n                console.error(\n                    `Failed invoking ${METHODNAME_GET_ORDER_VALIDITY}. Error: `,\n                    error\n                )\n            })\n    }, [glue])\n\n    return orderValidity\n}\n"],"names":["isValidInteger","myInt","parseInt","trim","toString","getIntegerBorderClass","isLimitPriceEnabled","orderType","props","console","log","useState","selectedSide","setSelectedSide","quantity","setQuantity","selectedSecurity","setSelectedSecurity","clientId","setClientId","selectedOrderType","setSelectedOrderType","limitPrice","setLimitPrice","selectedValidity","setSelectedValidity","undefined","expireTime","setExpireTime","comments","setComments","showValidation","setShowValidation","instruments","useInstruments","orderTypes","useOrderTypes","orderValidity","useOrderValidity","orderSides","useOrderSides","clients","useClients","securityIdOptions","useMemo","map","ticker","bbgExchange","value","formatInstrument","label","meta","sort","a","b","orderTypeOptions","Object","entries","filter","enabled","displayName","validityOptions","sideOptions","clientOptions","glue","useContext","GlueContext","setFromOrderInfo","useCallback","info","find","opt","side","foundSecurity","instrument","timeInForce","setFromFdc3Order","order","fOrder","client","c","email","contact","id","name","Date","notes","getTicker","toUpperCase","getExchange","orderId","dateCreated","quantityFilled","averagePrice","currency","tradeStatus","brokerId","convertFdc3OrderToOmsOrder","useEffect","intentOrder","getOrderInfo","contexts","get","ACME_SETTINGS_CONTEXT_NAME","acmeSettings","now","mockTimeOffset","result","parseFloat","getValidationMessage","messages","push","length","onClose","onSave","interop","invoke","METHODNAME_CREATE_ORDER","onComplete","action","limitPriceEnabled","limitPriceClassName","className","style","position","onClick","classNamePrefix","options","onChange","event","type","autoComplete","target","disabled","rows","resize","setClients","METHODNAME_GET_CLIENTS","then","returned","catch","error","setOrderTypes","METHODNAME_GET_ORDER_TYPES","setOrderValidity","METHODNAME_GET_ORDER_VALIDITY"],"sourceRoot":""}