{"version":3,"file":"static/js/67.23746275.chunk.js","mappings":"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","sources":["hooks/useGlueWindowChannels.ts","hooks/useGlueWorkspaceContext.ts","util/entityExtractors.ts","components/Common/ContextHandler.tsx","hooks/usePushExecutions/common.ts","util/DelayedActions.ts","components/TradeHistoryGrid.tsx","hooks/usePushExecutions/usePushExecutionsToEmail.ts","hooks/usePushExecutions/usePushExecutionsToChat.ts","hooks/usePushExecutions/usePushExecutionsToExcel.ts","components/TradeHistory.tsx","hooks/useClients.ts","hooks/useViewInstrument.ts","util/datetime.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { GlueApiT, GlueChannelContextT } from '../util/glueTypes'\n\ntype AnyFunction = (...args: any[]) => any\n\nconst useGlueWindowChannels = (glue: GlueApiT | undefined): [any, any, string | undefined] => {\n  const [channelData, setChannelData] = useState<any>()\n  const [contextData, setContextData] = useState<GlueChannelContextT | undefined>()\n  const [updaterId, setUpdaterId] = useState<string | undefined>()\n\n  useEffect(() => {\n    if (!glue) return\n    let unsubscribe: AnyFunction | undefined = undefined\n    try {\n      console.log(`Subscribing to window channels`)\n      unsubscribe = glue.channels.subscribe(channelHandler)\n    } catch (e) {\n      console.error(e)\n    }\n    return () => {\n      console.log(`Unsubscribing from window channels`)\n      unsubscribe?.()\n    }\n  }, [glue])\n\n  const channelHandler = (data: any, context: GlueChannelContextT, updaterId: string) => {\n    setChannelData(data)\n    setContextData(context)\n    setUpdaterId(updaterId)\n  }\n\n  return [channelData, contextData, updaterId]\n}\n\nexport default useGlueWindowChannels\n","import { useEffect, useState } from \"react\"\nimport { GlueApiT, GlueWorkspaceWindowT } from \"../util/glueTypes\"\nimport useGlueContext from \"./useGlueContext\"\n\ntype AnyFunction = (...args: any[]) => any\n\ntype Setters = {\n  setContextName: AnyFunction\n  setWorkspaceId: AnyFunction\n}\n\ninterface WindowRemovedArg {\n  windowId?: string | undefined\n  workspaceId: string\n  frameId: string\n}\n\nconst obtainContextName = (workspaceId: string): string => {\n  return \"___workspace___\" + workspaceId\n}\nconst handleWindowAdded = async (glue: GlueApiT, win: GlueWorkspaceWindowT, s: Setters) => {\n  if (win?.id !== glue?.windows.my().id) {\n    return\n  }\n  console.log(\"added to workspace:\", win.workspaceId)\n  s.setWorkspaceId(win.workspaceId)\n  s.setContextName(obtainContextName(win.workspaceId))\n}\n\nconst handleWindowRemoved = async (glue: GlueApiT, { windowId }: WindowRemovedArg, s: Setters) => {\n  if (windowId !== glue?.windows.my().id) {\n    return\n  }\n  console.log(\"removed from workspace\")\n  s.setWorkspaceId(\"\")\n}\n\nconst useGlueWorkspaceContext = (glue: GlueApiT | undefined): [any, string, string] => {\n  const [contextName, setContextName] = useState<string>(\"\")\n  const [contextData] = useGlueContext(glue, contextName)\n  const [workspaceId, setWorkspaceId] = useState<string>(\"\")\n\n  // window added and removed subscriptions\n  useEffect(() => {\n    if (!glue) return\n    let unsubPromiseAdded: Promise<AnyFunction> | undefined = undefined\n    let unsubPromiseRemoved: Promise<AnyFunction> | undefined = undefined\n    try {\n      console.log(`Subscribing to workspaces window added`)\n      unsubPromiseAdded = glue.workspaces?.onWindowAdded((w) => {\n        handleWindowAdded(glue, w, { setContextName, setWorkspaceId })\n      })\n      console.log(`Subscribing to workspaces window removed`)\n      unsubPromiseRemoved = glue.workspaces?.onWindowRemoved((arg) => {\n        handleWindowRemoved(glue, arg, { setContextName, setWorkspaceId })\n      })\n    } catch (e) {\n      console.error(e)\n    }\n    return () => {\n      unsubPromiseAdded\n        ?.then((unsubscribe) => {\n          console.log(`Unsubscribing from workspaces window added`)\n          unsubscribe()\n        })\n        .catch(console.error)\n      unsubPromiseRemoved\n        ?.then((unsubscribe) => {\n          console.log(`Unsubscribing from workspaces window removed`)\n          unsubscribe()\n        })\n        .catch(console.error)\n    }\n  }, [glue])\n\n  // initial workspace detection\n  useEffect(() => {\n    ;(async () => {\n      const myWs = await glue?.workspaces?.getMyWorkspace().catch((e) => null)\n      if (myWs) {\n        setWorkspaceId(myWs.id)\n        setContextName(obtainContextName(myWs.id))\n      }\n    })()\n  }, [glue])\n\n  return [contextData, workspaceId, contextName]\n}\n\nexport default useGlueWorkspaceContext\n","export const instrumentExtractor = (data: any): string | undefined => {\n    if (!data) return undefined\n    const id = data?.instrument?.id\n    return id?.RIC || \"\"\n  }\n","import React, { useContext, useEffect, useRef } from 'react'\nimport { GlueContext } from '@glue42/react-hooks'\nimport useGlueContext from '../../hooks/useGlueContext'\nimport useGlueWindowChannels from '../../hooks/useGlueWindowChannels'\nimport useGlueWorkspaceContext from '../../hooks/useGlueWorkspaceContext'\nimport condMan from '../../util/Conditions'\nimport { instrumentExtractor } from '../../util/entityExtractors'\n\nimport { OMS_GLOBAL_DATA_CONTEXT_NAME } from '../../constants/settings'\n\ntype AnyFunction = (...args: any[]) => any\n\ntype EntityValues = {\n    value?: any\n    glob?: any\n    chan?: any\n    ws?: any\n}\n\nconst updateEntity = async (\n    setter: AnyFunction,\n    refValues: EntityValues,\n    triggers: EntityValues,\n    conditions: EntityValues\n) => {\n    const initialValue = refValues.value\n    let candidateValue = initialValue\n\n    const bUpdateFromChan =\n        (triggers.value || triggers.chan) && refValues.chan !== undefined\n    const bUpdateFromGlob =\n        (triggers.value || triggers.glob) && refValues.glob !== undefined\n    const bUpdateFromWs =\n        (triggers.value || triggers.ws) && refValues.ws !== undefined\n\n    if (bUpdateFromChan && (await conditions.chan())) {\n        candidateValue = refValues.chan\n    }\n    if (bUpdateFromGlob && (await conditions.glob())) {\n        candidateValue = refValues.glob\n    }\n    if (bUpdateFromWs && (await conditions.ws())) {\n        candidateValue = refValues.ws\n    }\n    if (candidateValue !== initialValue) {\n        refValues.value = candidateValue\n        setter?.(candidateValue)\n    }\n}\n\nconst instrumentConditions: EntityValues = {\n    chan: () => condMan.evaluateCondition('sync.instrument.in.channel'),\n    ws: () => condMan.evaluateCondition('sync.instrument.in.wsContext'),\n    glob: () => condMan.evaluateCondition('sync.instrument.in.globalContext'),\n}\n\ntype ContextUpdateHandlerProps = {\n    instrumentSetter?: AnyFunction\n}\n\nconst ContextUpdateHandler = (props: ContextUpdateHandlerProps) => {\n    const { instrumentSetter } = props\n    const glue = useContext(GlueContext)\n\n    useEffect(() => {\n        console.log(`ContextHandler loaded`)\n        return () => {\n            console.log(`ContextHandler reloading...`)\n        }\n    }, [])\n\n    const refInstruments = useRef<EntityValues>({ value: '' })\n\n    const [chanData, chanContextData] = useGlueWindowChannels(glue)\n    const [globContextData] = useGlueContext(glue, OMS_GLOBAL_DATA_CONTEXT_NAME)\n    const [wsContextData, wsWorkspaceId] = useGlueWorkspaceContext(glue)\n\n    useEffect(() => {\n        if (instrumentSetter) {\n            refInstruments.current.chan = instrumentExtractor(chanData)\n            // special case when chanContextData is undefined: this means a channel was deselected\n            const triggers = chanContextData ? { chan: true } : { value: true }\n            updateEntity(\n                instrumentSetter,\n                refInstruments.current,\n                triggers,\n                instrumentConditions\n            )\n        }\n    }, [chanData, chanContextData, instrumentSetter])\n\n    useEffect(() => {\n        if (instrumentSetter) {\n            refInstruments.current.glob = instrumentExtractor(globContextData)\n            const triggers = { glob: true }\n            updateEntity(\n                instrumentSetter,\n                refInstruments.current,\n                triggers,\n                instrumentConditions\n            )\n        }\n    }, [globContextData, instrumentSetter])\n\n    useEffect(() => {\n        if (instrumentSetter) {\n            refInstruments.current.ws = instrumentExtractor(wsContextData)\n            const triggers = { ws: true }\n            updateEntity(\n                instrumentSetter,\n                refInstruments.current,\n                triggers,\n                instrumentConditions\n            )\n        }\n    }, [wsContextData, wsWorkspaceId, instrumentSetter])\n\n    return <div style={{ display: 'none' }}></div>\n}\n\nexport default React.memo(ContextUpdateHandler)\n","import { GlueT } from '../../util/glue'\n\nexport const DATE_TIME_FORMAT = 'yyyy-MM-DD HH:mm:ss'\n\nexport type PushExecutions = (\n    orderId: string,\n    dateCreated: Date | undefined\n) => void\nexport const getTradesWithinDay = async (\n    { interop }: GlueT,\n    orderId: string,\n    dateCreated: Date | undefined\n): Promise<any> =>\n    await interop\n        .invoke('T42.OMS.GetOrder', {\n            orderId,\n            withTrades: true,\n            date: dateCreated || new Date(),\n        })\n        .then(({ returned }) => ({\n            order: returned?.order,\n            trades: returned?.trades ?? [],\n        }))\n","type AnyFunction = (...args: any[]) => any\ntype OptionalAnyFunction = AnyFunction | null | undefined\nclass DelayedLatestActionExecutor {\n    private delay = 500\n    private latestAction: OptionalAnyFunction = undefined\n    private timeoutId: NodeJS.Timeout | undefined = undefined\n\n    constructor(myDelay?: number) {\n        this.setDelay(myDelay)\n    }\n\n    private performAction() {\n        const action = this.latestAction\n        this.cancel()\n        if (typeof action === 'function') {\n            action()\n        }\n    }\n\n    private clearTimeout() {\n        if (!this.timeoutId) return\n        clearTimeout(this.timeoutId)\n        this.timeoutId = undefined\n    }\n\n    public setDelay(myDelay?: number) {\n        if (typeof myDelay === 'number') {\n            this.delay = myDelay\n        }\n    }\n\n    public action(fn: OptionalAnyFunction) {\n        if (!this.timeoutId) {\n            this.timeoutId = setTimeout(\n                this.performAction.bind(this),\n                this.delay\n            )\n        }\n        this.latestAction = fn\n    }\n\n    public cancel() {\n        this.latestAction = undefined\n        this.clearTimeout()\n    }\n}\n\nexport { DelayedLatestActionExecutor }\n","import React, { useState, useEffect, useContext } from 'react'\nimport { GlueContext } from '@glue42/react-hooks'\nimport { Fdc3Order } from '../models/fdc3-order'\nimport { ColDef, GetContextMenuItemsParams, RowNode } from 'ag-grid-community'\nimport useGridHelper from '../hooks/GridHelper'\nimport { useCorrectRowSelection, GlueT } from '../util/glue'\nimport { OrderTrade } from '../models/orders'\nimport { AgGridReact, AgGridColumn } from 'ag-grid-react'\nimport {\n    METHODNAME_GET_ALL_TRADES,\n    METHODNAME_GET_ORDER,\n    METHODNAME_GET_TRADES_FOR_INSTRUMENT,\n} from '../constants/methods'\nimport '../css/Grids.css'\nimport 'react-datetime/css/react-datetime.css'\nimport '@glue42/theme/dist/packages/rc-rdt.css'\nimport 'ag-grid-enterprise/dist/styles/ag-grid.css'\nimport { DateEndOfDay, DateIsSameDay } from '../util/datetime'\n\nimport { columnDefsTrade } from '../constants/grids'\nimport useInstrumentDetailsContext from '../hooks/useInstrumentDetailsContext'\nimport {\n    usePushExecutionsToChat,\n    usePushExecutionsToEmail,\n    usePushExecutionsToExcel,\n} from '../hooks/usePushExecutions'\nimport { pushToBbgWorksheet } from '../util/bbg'\nimport { BBG_WORKSHEET_NAME } from '../constants'\nimport { useOrderSides } from '../hooks/useOrderSides'\nimport { useMorningStarSync } from '../hooks/useMorningStarSync'\nimport { DelayedLatestActionExecutor } from '../util/DelayedActions'\nimport { Fdc3Instrument } from '../models/fdc3-instrument'\nimport {\n    formatInstrumentFromId,\n    getInstrumentIdFromString,\n    getTickerFromString,\n    sleep,\n} from '../util/util'\nimport { useAcmeSettings } from '../hooks/useAcmeSettings'\nimport ContextHandler from './Common/ContextHandler'\nimport useViewInstrument from '../hooks/useViewInstrument'\n\nconst exec = new DelayedLatestActionExecutor(300)\n\nconst defaultColumnDef: ColDef = {\n    resizable: true,\n    filter: true,\n    sortable: true,\n    enableCellChangeFlash: true,\n}\n\nlet glue: GlueT | undefined = undefined\n\nfunction getPushExecutionDate(tradeDate: Date): Date {\n    let result\n    const now = new Date()\n\n    if (DateIsSameDay(tradeDate, now)) {\n        result = now\n    } else {\n        result = DateEndOfDay(tradeDate)\n    }\n\n    return result\n}\n\nconst getOrderTrades = async (\n    orderId: string,\n    date: Date\n): Promise<OrderTrade[]> => {\n    const result = await glue?.interop.invoke(METHODNAME_GET_ORDER, {\n        orderId: parseInt(orderId),\n        withTrades: true,\n        date,\n    })\n    return result?.returned?.trades || []\n}\n\nconst getInstrumentTrades = async (\n    instrument: Fdc3Instrument,\n    date: Date\n): Promise<OrderTrade[]> => {\n    const result = await glue?.interop.invoke(\n        METHODNAME_GET_TRADES_FOR_INSTRUMENT,\n        {\n            date,\n            instrument,\n        }\n    )\n\n    return result?.returned?.trades || []\n}\n\nconst getAllTrades = async (date: Date): Promise<OrderTrade[]> => {\n    const result = await glue?.interop.invoke(METHODNAME_GET_ALL_TRADES, {\n        date,\n    })\n    return result?.returned?.trades || []\n}\n\nexport interface TradeHistoryGridProps {\n    intentOrder?: Fdc3Order\n    intentInstrument?: Fdc3Instrument\n}\n\nconst TradeHistoryGrid = (props: TradeHistoryGridProps): JSX.Element => {\n    const { intentOrder, intentInstrument } = props\n    glue = useContext(GlueContext)\n\n    const grid = useGridHelper()\n    ;(window as any).grid = grid\n\n    const [rowData, setRowData] = useState<OrderTrade[]>()\n    const [time, setTime] = useState(new Date())\n    const { mockTimeOffset } = useAcmeSettings(glue)\n\n    const [filtOrderId, setFiltOrderId] = useState<string>('')\n    const [filtInstrument, setFiltInstrument] = useState<string>('')\n\n    const { instrumentContext, publish } = useInstrumentDetailsContext()\n\n    const orderSides = useOrderSides()\n    const pushExecutionsToEmail = usePushExecutionsToEmail()\n    const pushExecutionsToChat = usePushExecutionsToChat()\n    const pushExecutionsToExcel = usePushExecutionsToExcel()\n    const { syncInstrument } = useMorningStarSync()\n    const viewInstrument = useViewInstrument()\n    useCorrectRowSelection(grid?.api?.getSelectedNodes(), instrumentContext)\n\n    const onRowDataUpdated = (params: any) => {\n        console.log(params)\n        params.api.sizeColumnsToFit()\n    }\n    const getRowNodeId = (data: OrderTrade) =>\n        data.sliceId.toString() + data.timestamp.toISOString()\n\n    useEffect(() => {\n        const handler = () => setTime(new Date())\n        window.addEventListener('hashchange', handler)\n\n        const timer = setInterval(() => {\n            handler()\n        }, 10000)\n\n        return () => {\n            window.removeEventListener('hashchange', handler)\n            clearInterval(timer)\n        }\n    }, [])\n\n    // update grid contents\n    useEffect(() => {\n        const mockTime =\n            typeof mockTimeOffset === 'number'\n                ? new Date(time.getTime() + mockTimeOffset)\n                : time\n        if (filtOrderId) {\n            exec.action(async () => {\n                const trades = await getOrderTrades(filtOrderId, mockTime)\n                glue?.windows?.my()?.setTitle(`Trades: Order ${filtOrderId}`)\n                setRowData(trades)\n            })\n            return\n        }\n\n        if (filtInstrument) {\n            exec.action(async () => {\n                const fdc3Instrument: Fdc3Instrument = {\n                    type: 'fdc3.instrument',\n                    id: {\n                        ticker: getTickerFromString(filtInstrument),\n                    },\n                }\n                const trades = await getInstrumentTrades(\n                    fdc3Instrument,\n                    mockTime\n                )\n                glue?.windows?.my()?.setTitle(`Trades: ${filtInstrument}`)\n                setRowData(trades)\n            })\n            return\n        }\n\n        // no filter, get all trades\n        exec.action(async () => {\n            const trades = await getAllTrades(mockTime)\n            glue?.windows?.my()?.setTitle('Trade History')\n            setRowData(trades)\n        })\n    }, [time, filtOrderId, filtInstrument, mockTimeOffset])\n\n    useEffect(() => {\n        if (!intentOrder) {\n            setFiltOrderId('')\n            return\n        }\n        const orderId = intentOrder.id\n        if (orderId) {\n            ;(async () => {\n                await sleep(50) // delay slightly so that this arrives last and takes precedence\n                setFiltOrderId(orderId)\n            })()\n        }\n    }, [intentOrder])\n\n    useEffect(() => {\n        if (!intentInstrument) {\n            setFiltInstrument('')\n            return\n        }\n        const id = intentInstrument?.id\n        const candidate = id?.BBG || id?.RIC\n        const instrument = formatInstrumentFromId(\n            getInstrumentIdFromString(candidate)\n        )\n        if (instrument) {\n            setFiltInstrument(instrument)\n            setFiltOrderId('')\n        }\n    }, [intentInstrument])\n\n    const setInstrumentFromContext = (instrument: string) => {\n        console.log('Setting instrument from dynamic context:', instrument)\n        if (!instrument) return\n        setFiltInstrument(instrument)\n        setFiltOrderId('')\n    }\n\n    const onRowClicked = async (ev: { data: OrderTrade }) => {\n        await publish({\n            ticker: ev.data.instrument.ticker,\n            BBG_EXCHANGE: ev.data.instrument.bbgExchange,\n        })\n\n        syncInstrument(ev.data.instrument.ticker)\n        viewInstrument(ev.data.instrument)\n    }\n\n    const getContextMenuItems = (params: GetContextMenuItemsParams) => {\n        const trade = params.node?.data\n        let nodes: RowNode[] = params.api.getSelectedNodes()\n\n        const clickedNode = params.node\n        if (clickedNode) {\n            if (\n                nodes.find((node) => node.rowIndex === clickedNode.rowIndex) ===\n                undefined\n            ) {\n                nodes = [clickedNode]\n            }\n        }\n        if (nodes.length <= 0) {\n            return []\n        }\n        const instrumentsToPush = nodes.map(\n            ({\n                data: {\n                    instrument: { ticker, bbgExchange },\n                },\n            }: {\n                data: OrderTrade\n            }) => ({\n                ticker,\n                bbgExchange,\n            })\n        )\n        console.log(instrumentsToPush)\n\n        const pushDate = getPushExecutionDate(trade.timestamp)\n\n        return trade\n            ? [\n                  {\n                      name: 'Click to Report (Trades) via Email',\n                      action: () =>\n                          pushExecutionsToEmail(trade.orderId, pushDate),\n                  },\n                  {\n                      name: 'Click to Report (Trades) via Excel',\n                      action: () =>\n                          pushExecutionsToExcel(trade.orderId, pushDate),\n                  },\n                  {\n                      name: 'Click to Report (Trades) via Chat',\n                      action: () =>\n                          pushExecutionsToChat(trade.orderId, pushDate),\n                  },\n                  {\n                      name: 'Click to Track',\n                      action: () => {\n                          pushToBbgWorksheet(\n                              instrumentsToPush,\n                              glue,\n                              BBG_WORKSHEET_NAME\n                          )\n                      },\n                  },\n              ]\n            : []\n    }\n\n    return (\n        <>\n            <div className=\"trade-orders-grid d-flex flex-column flex-grow-1\">\n                <div className=\"ag-tick42 flex-grow-1\">\n                    <AgGridReact\n                        getContextMenuItems={getContextMenuItems}\n                        defaultColDef={defaultColumnDef}\n                        rowData={rowData}\n                        context={{ sidesMap: orderSides }}\n                        immutableData={true}\n                        rowSelection={'multiple'}\n                        getRowNodeId={getRowNodeId}\n                        onRowDataChanged={onRowDataUpdated}\n                        columnDefs={columnDefsTrade}\n                        onGridReady={(param) => {\n                            grid.onGridReady(param)\n                            //grid.api?.setColumnDefs(columnDefsTrade)\n                            param?.api.sizeColumnsToFit()\n                        }}\n                        onGridSizeChanged={({ api }) => {\n                            api.sizeColumnsToFit()\n                        }}\n                        onRowClicked={onRowClicked}\n                        cellFlashDelay={200}\n                        cellFadeDelay={500}\n                    >\n                        <AgGridColumn field=\"Loading Data ...\"></AgGridColumn>\n                    </AgGridReact>\n                </div>\n            </div>\n            <ContextHandler\n                instrumentSetter={setInstrumentFromContext}\n            ></ContextHandler>\n        </>\n    )\n}\n\nexport default TradeHistoryGrid\n","import { GlueContext } from '@glue42/react-hooks'\nimport { useCallback, useContext } from 'react'\nimport { DateStartOfDay } from '../../util/datetime'\nimport { useClients } from '../useClients'\nimport { getTradesWithinDay, PushExecutions } from './common'\nimport { OrderTrade } from '../../models/orders'\nimport { convertOrderTradeToFdc3Trade } from '../../util/util'\n\nexport default function usePushExecutionsToEmail(): PushExecutions {\n    const glue = useContext(GlueContext)\n    const clients = useClients()\n\n    const action = async (orderId: string, dateCreated: Date | undefined) => {\n        const { order, trades } = await getTradesWithinDay(\n            glue,\n            orderId,\n            dateCreated\n        )\n\n        const date = dateCreated || new Date()\n\n        const recipientEmail = clients?.find(\n            ({ clientId }) => order?.clientId === clientId\n        )?.email\n\n        const fdc3Trades = trades.map((trade: OrderTrade) =>\n            convertOrderTradeToFdc3Trade(trade)\n        )\n\n        await glue.interop\n            .invoke('T42.ShareTradeHistoryEmail', {\n                trades: fdc3Trades,\n                startDate: DateStartOfDay(date),\n                endDate: date,\n                contactList: {\n                    type: 'fdc3.contactList',\n                    contacts: [\n                        {\n                            type: 'fdc3.contact',\n                            id: {\n                                email: recipientEmail,\n                            },\n                        },\n                    ],\n                },\n            })\n            .catch(console.error)\n    }\n\n    return useCallback(action, [glue, clients])\n}\n","import { GlueContext } from '@glue42/react-hooks'\nimport { useCallback, useContext } from 'react'\nimport { useClients } from '../useClients'\nimport { getTradesWithinDay, PushExecutions } from './common'\nimport { convertOrderTradeToFdc3Trade } from '../../util/util'\nimport { OrderTrade } from '../../models/orders'\nimport { DateStartOfDay } from '../../util/datetime'\n\nexport default function usePushExecutionsToChat(): PushExecutions {\n    const glue = useContext(GlueContext)\n    const clients = useClients()\n\n    const action = async (orderId: string, dateCreated: Date | undefined) => {\n        const { order, trades } = await getTradesWithinDay(\n            glue,\n            orderId,\n            dateCreated\n        )\n        const recipientEmail = clients?.find(\n            ({ clientId }) => order.clientId === clientId\n        )?.email\n\n        const date = dateCreated || new Date()\n\n        const fdc3Trades = trades.map((trade: OrderTrade) =>\n            convertOrderTradeToFdc3Trade(trade)\n        )\n\n        await glue.interop\n            .invoke('T42.ShareTradeHistoryChat', {\n                trades: fdc3Trades,\n                startDate: DateStartOfDay(date),\n                endDate: date,\n                contactList: {\n                    type: 'fdc3.contactList',\n                    contacts: [\n                        {\n                            type: 'fdc3.contact',\n                            id: {\n                                email: recipientEmail,\n                            },\n                        },\n                    ],\n                },\n            })\n            .catch(console.error)\n    }\n\n    return useCallback(action, [glue, clients])\n}\n","import { GlueContext } from '@glue42/react-hooks'\nimport { useCallback, useContext } from 'react'\nimport { OrderTrade } from '../../models/orders'\nimport { DateStartOfDay } from '../../util/datetime'\nimport { convertOrderTradeToFdc3Trade } from '../../util/util'\nimport { getTradesWithinDay, PushExecutions } from './common'\n\nexport default function usePushExecutionsToExcel(): PushExecutions {\n    const glue = useContext(GlueContext)\n\n    const action = async (orderId: string, dateCreated: Date | undefined) => {\n        const { trades } = await getTradesWithinDay(glue, orderId, dateCreated)\n\n        const date = dateCreated || new Date()\n\n        const fdc3Trades = trades.map((trade: OrderTrade) =>\n            convertOrderTradeToFdc3Trade(trade)\n        )\n\n        await glue.interop\n            .invoke('T42.ShareTradeHistoryExcel', {\n                trades: fdc3Trades,\n                startDate: DateStartOfDay(date),\n                endDate: date,\n            })\n            .catch(console.error)\n    }\n\n    return useCallback(action, [glue])\n}\n","import { useCallback, useState } from 'react'\nimport TradeHistoryGrid from './TradeHistoryGrid'\nimport { Fdc3Order } from '../models/fdc3-order'\nimport { Fdc3Instrument } from '../models/fdc3-instrument'\nimport {\n    useAddIntentListener,\n    useAddTradeHistoryIntentListener,\n} from '../util/glue'\nimport {\n    INTENT_VIEW_INSTRUMENT_TRADE_HISTORY,\n    INTENT_VIEW_ORDER_TRADE_HISTORY,\n} from '../constants'\n\nexport default function TradeHistoryPage(): JSX.Element {\n    const [intentOrder, setIntentOrder] = useState<Fdc3Order>()\n    const [intentInstrument, setIntentInstrument] = useState<Fdc3Instrument>()\n\n    const handleViewTradeHistoryForOrder = useCallback((order: Fdc3Order) => {\n        console.log('viewTradeHistoryForOrder:', order)\n        setIntentOrder(order)\n    }, [])\n    useAddTradeHistoryIntentListener(\n        INTENT_VIEW_ORDER_TRADE_HISTORY,\n        handleViewTradeHistoryForOrder\n    )\n\n    const handleViewTradeHistoryForInstrument = useCallback(\n        (instrument: Fdc3Instrument) => {\n            console.log('viewTradeHistoryForInstrument:', instrument)\n            setIntentInstrument(instrument)\n        },\n        []\n    )\n    useAddIntentListener(\n        INTENT_VIEW_INSTRUMENT_TRADE_HISTORY,\n        handleViewTradeHistoryForInstrument\n    )\n\n    return (\n        <div className=\"orders-page d-flex flex-column flex-grow-1\">\n            <TradeHistoryGrid\n                intentOrder={intentOrder}\n                intentInstrument={intentInstrument}\n            />\n        </div>\n    )\n}\n","import { GlueContext } from '@glue42/react-hooks'\nimport { useContext, useEffect, useState } from 'react'\nimport { METHODNAME_GET_CLIENTS } from '../constants/methods'\nimport { ClientInfo } from '../models/clients'\n\nexport const useClients = (): ClientInfo[] => {\n    const glue = useContext(GlueContext)\n    const [clients, setClients] = useState<ClientInfo[]>([])\n\n    useEffect(() => {\n        glue.interop\n            .invoke(METHODNAME_GET_CLIENTS)\n            .then((result) => setClients(result.returned?.clients))\n            .catch((error) => {\n                console.error(\n                    `Failed invoking ${METHODNAME_GET_CLIENTS}. Error: `,\n                    error\n                )\n            })\n    }, [glue])\n\n    return clients\n}\n","import { GlueContext } from '@glue42/react-hooks'\r\nimport { useCallback, useContext } from 'react'\r\nimport { getFdc3Instrument } from '../util/util'\r\nimport { InstrumentIdInternal } from '../models/orders'\r\nimport { ViewInstrumentIntent } from '../constants'\r\n\r\nexport default function useViewInstrument() {\r\n    const glue = useContext(GlueContext)\r\n\r\n    return useCallback(\r\n        (instrument: string | InstrumentIdInternal) => {\r\n            const fdc3Instrument = getFdc3Instrument(instrument)\r\n            if (fdc3Instrument) {\r\n                glue?.intents.raise({\r\n                    intent: ViewInstrumentIntent,\r\n                    context: {\r\n                        type: fdc3Instrument.type,\r\n                        data: fdc3Instrument,\r\n                    },\r\n                })\r\n            }\r\n        },\r\n        [glue]\r\n    )\r\n}\r\n","const MS_PER_DAY = 1000 * 60 * 60 * 24\n\nexport const DateAddDays = (date: Date, days: number): Date => {\n    const result = new Date(date)\n    result.setDate(result.getDate() + days)\n    return result\n}\n\nexport const DateAddSeconds = (date: Date, seconds: number): Date => {\n    const result = new Date(date)\n    result.setUTCSeconds(result.getUTCSeconds() + seconds)\n    return result\n}\n\nexport const DateStartOfDay = (date: Date): Date => {\n    const result = new Date(date)\n    result.setHours(0, 0, 0, 0)\n    return result\n}\n\nexport const DateEndOfDay = (date: Date): Date => {\n    const result = new Date(date)\n    result.setHours(23, 59, 59, 999)\n    return result\n}\n\nexport const DateGetDaysSpan = (from: Date, to: Date): number => {\n    const diff = DateStartOfDay(to).getTime() - DateStartOfDay(from).getTime()\n    return Math.round(diff / MS_PER_DAY) // rounding needed in case the dates span over a DST change\n}\n\nexport const DateIsValid = (date: Date | undefined): boolean => {\n    if (date) {\n        return !isNaN(date.getTime())\n    }\n    return false\n}\n\nexport const DateIsSameDay = (date1: Date, date2: Date): boolean => {\n    return (\n        date1 &&\n        date2 &&\n        date1.getDate() === date2.getDate() &&\n        date1.getMonth() === date2.getMonth() &&\n        date1.getFullYear() === date2.getFullYear()\n    )\n}\n\nexport const DateFromStringOrDate = (\n    date: Date | string | undefined\n): Date | undefined => {\n    let result: Date | undefined = undefined\n    if (date) {\n        if (date instanceof Date) {\n            DateIsValid(date) && (result = date)\n        } else if (typeof date === 'string') {\n            const myDate = new Date(date)\n            DateIsValid(myDate) && (result = myDate)\n        }\n    }\n    return result\n}\n\nexport const MDateAddDays = (date: Date, days: number): void => {\n    date.setDate(date.getDate() + days)\n}\n\nexport const MDateAddSeconds = (date: Date, seconds: number): void => {\n    date.setUTCSeconds(date.getUTCSeconds() + seconds)\n}\n"],"names":["glue","useState","channelData","setChannelData","contextData","setContextData","updaterId","setUpdaterId","useEffect","unsubscribe","undefined","console","log","channels","subscribe","channelHandler","e","error","data","context","obtainContextName","workspaceId","handleWindowAdded","win","s","id","windows","my","setWorkspaceId","setContextName","handleWindowRemoved","windowId","contextName","useGlueContext","unsubPromiseAdded","unsubPromiseRemoved","workspaces","onWindowAdded","w","onWindowRemoved","arg","then","catch","getMyWorkspace","myWs","instrumentExtractor","instrument","RIC","updateEntity","setter","refValues","triggers","conditions","initialValue","value","candidateValue","bUpdateFromChan","chan","bUpdateFromGlob","glob","bUpdateFromWs","ws","instrumentConditions","condMan","ContextUpdateHandler","props","instrumentSetter","useContext","GlueContext","refInstruments","useRef","useGlueWindowChannels","chanData","chanContextData","OMS_GLOBAL_DATA_CONTEXT_NAME","globContextData","useGlueWorkspaceContext","wsContextData","wsWorkspaceId","current","style","display","React","getTradesWithinDay","orderId","dateCreated","interop","invoke","withTrades","date","Date","returned","order","trades","DelayedLatestActionExecutor","myDelay","delay","latestAction","timeoutId","this","setDelay","action","cancel","clearTimeout","fn","setTimeout","performAction","bind","exec","defaultColumnDef","resizable","filter","sortable","enableCellChangeFlash","getOrderTrades","METHODNAME_GET_ORDER","parseInt","result","getInstrumentTrades","METHODNAME_GET_TRADES_FOR_INSTRUMENT","getAllTrades","METHODNAME_GET_ALL_TRADES","intentOrder","intentInstrument","grid","useGridHelper","window","rowData","setRowData","time","setTime","mockTimeOffset","useAcmeSettings","filtOrderId","setFiltOrderId","filtInstrument","setFiltInstrument","useInstrumentDetailsContext","instrumentContext","publish","orderSides","useOrderSides","pushExecutionsToEmail","clients","useClients","recipientEmail","find","clientId","email","fdc3Trades","map","trade","convertOrderTradeToFdc3Trade","startDate","DateStartOfDay","endDate","contactList","type","contacts","useCallback","usePushExecutionsToEmail","pushExecutionsToChat","usePushExecutionsToChat","pushExecutionsToExcel","usePushExecutionsToExcel","syncInstrument","useMorningStarSync","viewInstrument","useViewInstrument","useCorrectRowSelection","api","getSelectedNodes","handler","addEventListener","timer","setInterval","removeEventListener","clearInterval","mockTime","getTime","setTitle","fdc3Instrument","ticker","getTickerFromString","sleep","candidate","BBG","formatInstrumentFromId","getInstrumentIdFromString","onRowClicked","ev","BBG_EXCHANGE","bbgExchange","className","AgGridReact","getContextMenuItems","params","node","nodes","clickedNode","rowIndex","length","instrumentsToPush","pushDate","tradeDate","now","DateIsSameDay","DateEndOfDay","getPushExecutionDate","timestamp","name","pushToBbgWorksheet","BBG_WORKSHEET_NAME","defaultColDef","sidesMap","immutableData","rowSelection","getRowNodeId","sliceId","toString","toISOString","onRowDataChanged","sizeColumnsToFit","columnDefs","columnDefsTrade","onGridReady","param","onGridSizeChanged","cellFlashDelay","cellFadeDelay","AgGridColumn","field","ContextHandler","TradeHistoryPage","setIntentOrder","setIntentInstrument","handleViewTradeHistoryForOrder","useAddTradeHistoryIntentListener","INTENT_VIEW_ORDER_TRADE_HISTORY","handleViewTradeHistoryForInstrument","useAddIntentListener","INTENT_VIEW_INSTRUMENT_TRADE_HISTORY","setClients","METHODNAME_GET_CLIENTS","getFdc3Instrument","intents","raise","intent","ViewInstrumentIntent","DateAddDays","days","setDate","getDate","setHours","DateIsValid","isNaN","date1","date2","getMonth","getFullYear","DateFromStringOrDate","myDate"],"sourceRoot":""}