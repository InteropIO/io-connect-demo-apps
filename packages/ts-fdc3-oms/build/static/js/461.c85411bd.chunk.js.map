{"version":3,"file":"static/js/461.c85411bd.chunk.js","mappings":"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","sources":["hooks/useGlueWindowChannels.ts","hooks/useGlueWorkspaceContext.ts","util/entityExtractors.ts","components/Common/ContextHandler.tsx","components/ChannelSelector.tsx","components/OrderFilters.tsx","hooks/useOrders.tsx","components/ActiveOrdersGrid.tsx","util/pretrade.ts","components/NewOrderModal.tsx","components/OrdersPage.tsx","hooks/useViewInstrument.ts","util/datetime.ts"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { GlueApiT, GlueChannelContextT } from '../util/glueTypes'\n\ntype AnyFunction = (...args: any[]) => any\n\nconst useGlueWindowChannels = (glue: GlueApiT | undefined): [any, any, string | undefined] => {\n  const [channelData, setChannelData] = useState<any>()\n  const [contextData, setContextData] = useState<GlueChannelContextT | undefined>()\n  const [updaterId, setUpdaterId] = useState<string | undefined>()\n\n  useEffect(() => {\n    if (!glue) return\n    let unsubscribe: AnyFunction | undefined = undefined\n    try {\n      console.log(`Subscribing to window channels`)\n      unsubscribe = glue.channels.subscribe(channelHandler)\n    } catch (e) {\n      console.error(e)\n    }\n    return () => {\n      console.log(`Unsubscribing from window channels`)\n      unsubscribe?.()\n    }\n  }, [glue])\n\n  const channelHandler = (data: any, context: GlueChannelContextT, updaterId: string) => {\n    setChannelData(data)\n    setContextData(context)\n    setUpdaterId(updaterId)\n  }\n\n  return [channelData, contextData, updaterId]\n}\n\nexport default useGlueWindowChannels\n","import { useEffect, useState } from \"react\"\nimport { GlueApiT, GlueWorkspaceWindowT } from \"../util/glueTypes\"\nimport useGlueContext from \"./useGlueContext\"\n\ntype AnyFunction = (...args: any[]) => any\n\ntype Setters = {\n  setContextName: AnyFunction\n  setWorkspaceId: AnyFunction\n}\n\ninterface WindowRemovedArg {\n  windowId?: string | undefined\n  workspaceId: string\n  frameId: string\n}\n\nconst obtainContextName = (workspaceId: string): string => {\n  return \"___workspace___\" + workspaceId\n}\nconst handleWindowAdded = async (glue: GlueApiT, win: GlueWorkspaceWindowT, s: Setters) => {\n  if (win?.id !== glue?.windows.my().id) {\n    return\n  }\n  console.log(\"added to workspace:\", win.workspaceId)\n  s.setWorkspaceId(win.workspaceId)\n  s.setContextName(obtainContextName(win.workspaceId))\n}\n\nconst handleWindowRemoved = async (glue: GlueApiT, { windowId }: WindowRemovedArg, s: Setters) => {\n  if (windowId !== glue?.windows.my().id) {\n    return\n  }\n  console.log(\"removed from workspace\")\n  s.setWorkspaceId(\"\")\n}\n\nconst useGlueWorkspaceContext = (glue: GlueApiT | undefined): [any, string, string] => {\n  const [contextName, setContextName] = useState<string>(\"\")\n  const [contextData] = useGlueContext(glue, contextName)\n  const [workspaceId, setWorkspaceId] = useState<string>(\"\")\n\n  // window added and removed subscriptions\n  useEffect(() => {\n    if (!glue) return\n    let unsubPromiseAdded: Promise<AnyFunction> | undefined = undefined\n    let unsubPromiseRemoved: Promise<AnyFunction> | undefined = undefined\n    try {\n      console.log(`Subscribing to workspaces window added`)\n      unsubPromiseAdded = glue.workspaces?.onWindowAdded((w) => {\n        handleWindowAdded(glue, w, { setContextName, setWorkspaceId })\n      })\n      console.log(`Subscribing to workspaces window removed`)\n      unsubPromiseRemoved = glue.workspaces?.onWindowRemoved((arg) => {\n        handleWindowRemoved(glue, arg, { setContextName, setWorkspaceId })\n      })\n    } catch (e) {\n      console.error(e)\n    }\n    return () => {\n      unsubPromiseAdded\n        ?.then((unsubscribe) => {\n          console.log(`Unsubscribing from workspaces window added`)\n          unsubscribe()\n        })\n        .catch(console.error)\n      unsubPromiseRemoved\n        ?.then((unsubscribe) => {\n          console.log(`Unsubscribing from workspaces window removed`)\n          unsubscribe()\n        })\n        .catch(console.error)\n    }\n  }, [glue])\n\n  // initial workspace detection\n  useEffect(() => {\n    ;(async () => {\n      const myWs = await glue?.workspaces?.getMyWorkspace().catch((e) => null)\n      if (myWs) {\n        setWorkspaceId(myWs.id)\n        setContextName(obtainContextName(myWs.id))\n      }\n    })()\n  }, [glue])\n\n  return [contextData, workspaceId, contextName]\n}\n\nexport default useGlueWorkspaceContext\n","export const instrumentExtractor = (data: any): string | undefined => {\n    if (!data) return undefined\n    const id = data?.instrument?.id\n    return id?.RIC || \"\"\n  }\n","import React, { useContext, useEffect, useRef } from 'react'\nimport { GlueContext } from '@glue42/react-hooks'\nimport useGlueContext from '../../hooks/useGlueContext'\nimport useGlueWindowChannels from '../../hooks/useGlueWindowChannels'\nimport useGlueWorkspaceContext from '../../hooks/useGlueWorkspaceContext'\nimport condMan from '../../util/Conditions'\nimport { instrumentExtractor } from '../../util/entityExtractors'\n\nimport { OMS_GLOBAL_DATA_CONTEXT_NAME } from '../../constants/settings'\n\ntype AnyFunction = (...args: any[]) => any\n\ntype EntityValues = {\n    value?: any\n    glob?: any\n    chan?: any\n    ws?: any\n}\n\nconst updateEntity = async (\n    setter: AnyFunction,\n    refValues: EntityValues,\n    triggers: EntityValues,\n    conditions: EntityValues\n) => {\n    const initialValue = refValues.value\n    let candidateValue = initialValue\n\n    const bUpdateFromChan =\n        (triggers.value || triggers.chan) && refValues.chan !== undefined\n    const bUpdateFromGlob =\n        (triggers.value || triggers.glob) && refValues.glob !== undefined\n    const bUpdateFromWs =\n        (triggers.value || triggers.ws) && refValues.ws !== undefined\n\n    if (bUpdateFromChan && (await conditions.chan())) {\n        candidateValue = refValues.chan\n    }\n    if (bUpdateFromGlob && (await conditions.glob())) {\n        candidateValue = refValues.glob\n    }\n    if (bUpdateFromWs && (await conditions.ws())) {\n        candidateValue = refValues.ws\n    }\n    if (candidateValue !== initialValue) {\n        refValues.value = candidateValue\n        setter?.(candidateValue)\n    }\n}\n\nconst instrumentConditions: EntityValues = {\n    chan: () => condMan.evaluateCondition('sync.instrument.in.channel'),\n    ws: () => condMan.evaluateCondition('sync.instrument.in.wsContext'),\n    glob: () => condMan.evaluateCondition('sync.instrument.in.globalContext'),\n}\n\ntype ContextUpdateHandlerProps = {\n    instrumentSetter?: AnyFunction\n}\n\nconst ContextUpdateHandler = (props: ContextUpdateHandlerProps) => {\n    const { instrumentSetter } = props\n    const glue = useContext(GlueContext)\n\n    useEffect(() => {\n        console.log(`ContextHandler loaded`)\n        return () => {\n            console.log(`ContextHandler reloading...`)\n        }\n    }, [])\n\n    const refInstruments = useRef<EntityValues>({ value: '' })\n\n    const [chanData, chanContextData] = useGlueWindowChannels(glue)\n    const [globContextData] = useGlueContext(glue, OMS_GLOBAL_DATA_CONTEXT_NAME)\n    const [wsContextData, wsWorkspaceId] = useGlueWorkspaceContext(glue)\n\n    useEffect(() => {\n        if (instrumentSetter) {\n            refInstruments.current.chan = instrumentExtractor(chanData)\n            // special case when chanContextData is undefined: this means a channel was deselected\n            const triggers = chanContextData ? { chan: true } : { value: true }\n            updateEntity(\n                instrumentSetter,\n                refInstruments.current,\n                triggers,\n                instrumentConditions\n            )\n        }\n    }, [chanData, chanContextData, instrumentSetter])\n\n    useEffect(() => {\n        if (instrumentSetter) {\n            refInstruments.current.glob = instrumentExtractor(globContextData)\n            const triggers = { glob: true }\n            updateEntity(\n                instrumentSetter,\n                refInstruments.current,\n                triggers,\n                instrumentConditions\n            )\n        }\n    }, [globContextData, instrumentSetter])\n\n    useEffect(() => {\n        if (instrumentSetter) {\n            refInstruments.current.ws = instrumentExtractor(wsContextData)\n            const triggers = { ws: true }\n            updateEntity(\n                instrumentSetter,\n                refInstruments.current,\n                triggers,\n                instrumentConditions\n            )\n        }\n    }, [wsContextData, wsWorkspaceId, instrumentSetter])\n\n    return <div style={{ display: 'none' }}></div>\n}\n\nexport default React.memo(ContextUpdateHandler)\n","import { useState, useEffect, useContext } from 'react'\nimport { GlueContext } from '@glue42/react-hooks'\nimport '@glue42/theme/dist/packages/rc-select.css'\nimport Select, { components } from 'react-select'\nimport chroma from 'chroma-js'\n\nimport {sleep} from \"../util/util\"\nimport { Button } from 'reactstrap'\n\nimport { GlueT, GlueChannelContextT } from \"../util/glue\"\n\ninterface ChannelComboOption {\n  value: string\n  label: string\n  color: string\n}\n\nconst noneOption:ChannelComboOption = {\n  value: \"\",\n  label: 'None',\n  color: \"rgba(0,0,0,0)\"\n}\n\nconst listGlueChannels = async (glue:GlueT):Promise<GlueChannelContextT[]> => {\n  if(!glue) return []\n  let list = await glue?.channels.list()\n  if (list) {\n    for (let i = 0; i < 5; i++) {\n      if (list.length > 0 && list[0].meta) break\n      //console.log(\"Invalid channels returned\",list)\n      await sleep(500)\n      list = await glue?.channels.list()\n    }\n  }\n  if (!list || list.length === 0 || !list[0].meta) {\n    return []\n  }\n  return list;\n}\n\nconst getDisplaySelectedOption = (opt:ChannelComboOption):ChannelComboOption => ({\n  value: opt.value,\n  label: \"☍\",\n  color: opt.color\n})\n\nconst CustomSelectOption = (props:any): JSX.Element => {\n  const backgroundColor = props?.data?.color || \"rgba(0,0,0,0)\"\n  const bgColorChroma = chroma(backgroundColor)\n  const color = !(props?.data?.value) ? \"inherit\"\n    : (props.isSelected || props.isFocused) ? chroma.contrast(bgColorChroma, \"white\") > 2 ? \"white\" : \"black\"\n    : backgroundColor\n\n  return (\n      <div\n        style={{\n          color,\n          backgroundColor,\n          textAlign:\"center\",\n        }}>\n        <components.Option {...props} />        \n      </div>\n  )\n}\n\nlet baseSize = 1.4\nconst CustomSelectControl = (props:any) => {\n  const selectedVal = props?.selectProps?.value\n  const backgroundColor = selectedVal?.color || \"rgba(0,0,0,0)\"\n  const bgColorChroma = chroma(backgroundColor)\n  const color = !(selectedVal?.value) ? \"inherit\"\n    : chroma.contrast(bgColorChroma, \"white\") > 2 ? \"white\" : \"black\"\n \n   return (\n    <Button\n      style={{\n        color,\n        backgroundColor,\n        lineHeight: baseSize + \"rem\",\n        padding: \"0 \" + baseSize*.2 + \"rem\",\n        fontSize: baseSize + \"rem\",\n        cursor: \"default\",\n        userSelect: \"none\",\n      }}\n      onClick={()=>{\n        if (props.selectProps.menuIsOpen) {\n          props.selectProps.onMenuClose()\n        } else {\n          props.selectProps.onMenuOpen()\n        }\n      }}\n      onBlur={()=>{\n        props.selectProps.onMenuClose()\n      }}      \n    >{selectedVal?.label}</Button>\n  )\n}\n\nconst ChannelSelector = (props:{baseSize?:number|null}): JSX.Element => {\n  const [channelOptions,setChannelOptions] = useState<ChannelComboOption[]>([])\n  const [selectedChannel,setSelectedChannel] = useState<ChannelComboOption>(getDisplaySelectedOption(noneOption))\n  const glue:GlueT|undefined = useContext(GlueContext)\n  props?.baseSize && (baseSize = props.baseSize)\n\n  useEffect(() => {\n    ;(async ()=>{\n      const allChannels = await listGlueChannels(glue)\n      console.log(\"All Channels\",allChannels)\n      const cOptions: ChannelComboOption[] = [noneOption]\n      cOptions.push(...allChannels.map((c)=>{\n        return {\n          value: c.name,\n          label: \"✔\",\n          color: c.meta.color\n        }\n      }))\n      \n      setChannelOptions(cOptions)\n\n    })()\n  }, [glue])\n\n  return (\n    <div style={{}}>\n    <Select classNamePrefix=\"select\" className=\"channel-selector\"\n      components={{\n        DropdownIndicator:() => null,\n        IndicatorSeparator:() => null,\n        Option: CustomSelectOption,\n        Control: CustomSelectControl\n       }}\n      //isSearchable={false}\n      styles={{\n        menu:({...styles})=>({...styles, width:\"4rem\"}),\n      }}\n      options={channelOptions}\n      value={selectedChannel}\n      menuPlacement=\"auto\"\n      maxMenuHeight={640}\n      onChange={(sel)=>{\n        setSelectedChannel(getDisplaySelectedOption(sel as any))\n      }}\n      \n    />\n    </div>\n  )\n}\n\nexport default ChannelSelector\n","import CreatableSelect from 'react-select/creatable'\nimport { Col } from 'reactstrap'\n\nimport Datetime from 'react-datetime'\nimport 'react-datetime/css/react-datetime.css'\nimport '@glue42/theme/dist/packages/rc-rdt.css'\n\nimport '../css/select-control.css'\n\nimport { useClients } from '../hooks/useClients'\nimport { useInstruments } from '../hooks/useInstruments'\nimport { formatInstrument } from '../util/util'\nimport { DateStartOfDay } from '../util/datetime'\nimport { InstrumentIdInternal } from '../models/orders'\n\nexport interface OrderFiltersProps {\n    fromDate: Date\n    setFromDate: (date: Date) => void\n    toDate: Date\n    setToDate: (date: Date) => void\n    clientId: string\n    setClientId: (accountId: string) => void\n    securityId?: { bbgExchange: string; ticker: string }\n    setSecurityId: (instrumentId?: InstrumentIdInternal) => void\n}\n\ninterface ComboOption {\n    value: string\n    label: string\n    meta?: { ticker: string; bbgExchange: string }\n}\n\nconst today = DateStartOfDay(new Date())\n\nfunction isDateInThePast(currentDate: any): boolean {\n    return currentDate?.isBefore(today)\n}\n\nconst customStyles = {\n    menu: (styles: any) => {\n        return {\n            ...styles,\n            minWidth: '6rem',\n        }\n    },\n    menuList: (styles: any) => {\n        return {\n            ...styles,\n            maxHeight: 150,\n        }\n    },\n}\n\nconst OrderFilters = (props: OrderFiltersProps): JSX.Element => {\n    const clients = useClients()\n    const instruments = useInstruments()\n\n    const clientOptions: ComboOption[] = clients\n        ? Object.entries(clients)\n              .map(([, val]) => ({\n                  value: val.clientId,\n                  label: val.clientId,\n              }))\n        : []\n    clientOptions.unshift({\n        value: '',\n        label: '* ALL',\n    })\n\n    const securityOptions: ComboOption[] = instruments\n        ? Object.entries(instruments)\n              .map(([, { ticker, bbgExchange }]) => ({\n                  value: formatInstrument(ticker, bbgExchange),\n                  label: formatInstrument(ticker, bbgExchange),\n                  meta: {\n                      ticker,\n                      bbgExchange,\n                  },\n              }))\n              .sort((a, b) => (a.value < b.value ? -1 : 1))\n        : []\n\n    securityOptions.unshift({\n        value: '',\n        label: '* ALL',\n        meta: {\n            ticker: '',\n            bbgExchange: '',\n        },\n    })\n\n    let selectedClient = clientOptions.find(\n        (opt) => opt.value === props?.clientId\n    )\n    if (!selectedClient) {\n        if (props?.clientId) {\n            selectedClient = {\n                label: props.clientId,\n                value: props.clientId,\n            }\n        } else {\n            selectedClient = null as any\n        }\n    }\n\n    let selectedSecurity = securityOptions.find(\n        (opt) =>\n            opt.meta?.ticker === props?.securityId?.ticker &&\n            opt.meta?.bbgExchange === props?.securityId?.bbgExchange\n    )\n\n    if (!selectedSecurity) {\n        if (props?.securityId) {\n            selectedSecurity = {\n                label:\n                    props.securityId?.ticker +\n                    ' ' +\n                    props.securityId?.bbgExchange,\n                value:\n                    props.securityId?.ticker +\n                    ' ' +\n                    props.securityId?.bbgExchange,\n                meta: props.securityId,\n            }\n        } else {\n            selectedSecurity = {\n                value: '',\n                label: '* ALL',\n            }\n        }\n    }\n\n    return (\n        <div className=\"d-flex align-items-baseline justify-content-between\">\n            <div className=\"d-flex align-items-center\">\n                <span>From&nbsp;</span>\n                <Datetime\n                    value={props.fromDate}\n                    onChange={(date) =>\n                        props.setFromDate(new Date(date.valueOf()))\n                    }\n                    dateFormat={'YYYY-MM-DD'}\n                    timeFormat={false}\n                    closeOnSelect={true}\n                    inputProps={{\n                        style: {\n                            width: '5rem',\n                            height: '2rem',\n                            padding: '0 1px',\n                            textAlign: 'center',\n                        },\n                        placeholder: 'from',\n                        readOnly: true,\n                    }}\n                    isValidDate={isDateInThePast}\n                />\n                <span>&nbsp;&nbsp;&nbsp;</span>\n                <span>To&nbsp;</span>\n                <Datetime\n                    value={props.toDate}\n                    onChange={(date) =>\n                        props.setToDate(new Date(date.valueOf()))\n                    }\n                    dateFormat={'YYYY-MM-DD'}\n                    timeFormat={false}\n                    closeOnSelect={true}\n                    inputProps={{\n                        style: {\n                            width: '5rem',\n                            height: '2rem',\n                            padding: '0 1px',\n                            textAlign: 'center',\n                        },\n                        placeholder: 'from',\n                        readOnly: true,\n                    }}\n                    isValidDate={isDateInThePast}\n                />\n                <span>&nbsp;&nbsp;&nbsp;</span>\n                <span>Client&nbsp;</span>\n                <Col style={{ width: '5rem', padding: '0' }}>\n                    <CreatableSelect\n                        classNamePrefix=\"select\"\n                        className=\"select-minpadding\"\n                        //id={\"clientId\"} name={\"clientId\"}\n                        value={selectedClient}\n                        options={clientOptions}\n                        onChange={(opt) => props.setClientId(opt?.value || '')}\n                        styles={customStyles}\n                    />\n                </Col>\n                <span>&nbsp;&nbsp;&nbsp;</span>\n                <span>Security&nbsp;</span>\n                <Col style={{ width: '6rem', padding: '0' }}>\n                    <CreatableSelect\n                        classNamePrefix=\"select\"\n                        className=\"select-minpadding\"\n                        //id={\"securityId\"} name={\"securityId\"}\n                        value={selectedSecurity}\n                        options={securityOptions}\n                        onChange={(opt) => props.setSecurityId(opt?.meta)}\n                        styles={customStyles}\n                    />\n                </Col>\n            </div>\n        </div>\n    )\n}\n\nexport default OrderFilters\n","import { GlueContext } from '@glue42/react-hooks'\nimport { useCallback, useContext } from 'react'\nimport {\n    METHODNAME_GET_ORDER,\n    METHODNAME_GET_ORDERS,\n} from '../constants/methods'\nimport { OrderInfo, OrderSlice } from '../models/orders'\nimport { DateAddDays } from '../util/datetime'\nimport { GlueT } from '../util/glue'\n\ninterface GetOrdersArgs {\n    date: Date\n    withSlices?: boolean\n    withTrades?: boolean\n}\n\ninterface GetOrdersResult {\n    orders: OrderInfo[]\n    slices?: OrderSlice[]\n    trades?: OrderInfo[]\n}\n\nconst invokeGetOrders = async (\n    glue: GlueT,\n    args: GetOrdersArgs\n): Promise<GetOrdersResult> => {\n    return glue.interop\n        .invoke(METHODNAME_GET_ORDERS, args)\n        .then((result) => result.returned)\n        .catch((error) => {\n            console.error(\n                `Failed invoking ${METHODNAME_GET_ORDERS}. Error: `,\n                error\n            )\n            return {\n                orders: [],\n            }\n        })\n}\n\ninterface GetOrderByIdArgs extends GetOrdersArgs {\n    orderId: number\n}\n\ntype GetOrderByIdResult = Omit<GetOrdersResult, 'orders'> & {\n    order: OrderInfo\n}\n\nconst invokeGetOrderById = async (\n    glue: GlueT,\n    args: GetOrderByIdArgs\n): Promise<GetOrderByIdResult> => {\n    return glue.interop\n        .invoke(METHODNAME_GET_ORDER, args)\n        .then((result) => result.returned)\n        .catch((error) => {\n            console.error(\n                `Failed invoking ${METHODNAME_GET_ORDER}. Error: `,\n                error\n            )\n        })\n}\n\nexport default function useOrders(): {\n    getOrders: CallableFunction\n    getOrdersHistory: CallableFunction\n    getOrderSlices: CallableFunction\n} {\n    const glue = useContext(GlueContext)\n\n    const getOrders = useCallback(\n        async (asOfDate: Date = new Date()) => {\n            const { orders } = await invokeGetOrders(glue, {\n                date: asOfDate,\n                withSlices: false,\n                withTrades: false,\n            })\n            return orders ?? []\n        },\n        [glue]\n    )\n\n    const getOrdersHistory = useCallback(\n        async (range: { from: Date; to: Date }) => {\n            const toDateBasis = new Date(range.to)\n            toDateBasis.setHours(23, 59, 59, 999)\n            const accOrders = []\n            let currentDay = new Date(toDateBasis)\n            let counter = 0\n            while (\n                currentDay.getTime() > range.from.getTime() &&\n                counter < 60\n            ) {\n                counter++\n                const orders = await getOrders(currentDay)\n                currentDay = DateAddDays(currentDay, -1)\n                accOrders.push(...orders)\n            }\n\n            return accOrders\n        },\n        [getOrders]\n    )\n\n    const getOrderSlices = useCallback(\n        async (orderId: number, date: Date) => {\n            const result = await invokeGetOrderById(glue, {\n                orderId,\n                date,\n                withSlices: true,\n                withTrades: false,\n            })\n            const slices = result?.slices ?? []\n\n            return slices\n        },\n        [glue]\n    )\n\n    return {\n        getOrders,\n        getOrdersHistory,\n        getOrderSlices,\n    }\n}\n","import React, {\n    useState,\n    useEffect,\n    useContext,\n    useRef,\n    useCallback,\n} from 'react'\nimport { GlueContext } from '@glue42/react-hooks'\nimport {\n    GetContextMenuItemsParams,\n    GridApi,\n    MenuItemDef,\n    RowClassParams,\n    RowStyle,\n} from 'ag-grid-community'\nimport { AgGridReact } from 'ag-grid-react'\nimport useGridHelper from '../hooks/GridHelper'\nimport { OrderFilterEx, OrderInfo, OrderSlice } from '../models/orders'\nimport { ClientInfo } from '../models/clients'\n\nimport 'ag-grid-enterprise'\n\nimport 'ag-grid-enterprise/dist/styles/ag-grid.css'\nimport { Button } from 'reactstrap'\nimport '../css/Grids.css'\n\nimport ChannelSelector from './ChannelSelector'\n\nimport {\n    columnDefsOrders,\n    columnDefsSlices,\n    defaultColumnDef,\n} from '../constants/grids'\nimport { Fdc3Order } from '../models/fdc3-order'\nimport { isGlue42Enterprise } from '../util/glue'\nimport OrderFilters from './OrderFilters'\nimport { HASH_ORDERS, HASH_ORDER_HISTORY } from '../constants/pageHashes'\nimport { pushToBbgWorksheet } from '../util/bbg'\nimport {\n    BBG_WORKSHEET_NAME,\n    INTENT_VIEW_ORDER_TRADE_HISTORY,\n    SF_SYSTEM_NAME,\n    ViewInstrumentIntent,\n} from '../constants'\nimport {\n    METHODNAME_ACME_SYNC_CONTACT,\n    METHODNAME_PRETRADE_BMLL,\n} from '../constants/methods'\nimport { getRelevantContextNodes } from '../util/ag-grid'\nimport { triggerPreTradeOrders } from '../util/pretrade'\nimport { useClients } from '../hooks/useClients'\nimport useOrders from '../hooks/useOrders'\nimport { useOrderSides } from '../hooks/useOrderSides'\nimport { useOrderTypes } from '../hooks/useOrderTypes'\nimport { useOrderValidity } from '../hooks/useOrderValidity'\nimport { useMorningStarSync } from '../hooks/useMorningStarSync'\nimport DateManipulator from './DateManipulator'\nimport { DateIsSameDay, DateEndOfDay } from '../util/datetime'\nimport useEntityPublisher from '../hooks/useContextPublisher'\nimport ContextHandler from './Common/ContextHandler'\nimport {\n    formatInstrumentFromId,\n    getFdc3Instrument,\n    getTickerFromString,\n} from '../util/util'\nimport { GlueApiT } from '../util/glueTypes'\nimport useViewInstrument from '../hooks/useViewInstrument'\n\nexport interface OrderGridParam {\n    setNewOrderView?: (set: boolean) => void\n    historyView?: boolean\n    historyFilter?: OrderFilterEx\n}\n\nconst parseUrl = (url: string) => {\n    const result: any = {}\n    url.replace(\n        /([?&])+([^=?#&]+)(?:=([^?#&]*))?/g,\n        function replacer(_, type, key, value) {\n            const decodedKey = decodeURIComponent(key)\n            const decodedValue = decodeURIComponent(value)\n            const capKey = decodedKey[0].toUpperCase() + decodedKey.slice(1)\n            result['url' + capKey] = decodedValue\n            return ''\n        }\n    )\n\n    let hash = ''\n    const hashMatch = url.match(/#([^?#&]*)/)\n    if (hashMatch) {\n        hash = decodeURIComponent(hashMatch[1])\n    }\n    result['urlHash'] = hash\n    return result\n}\nconst getOrderRowNodeId = (data: OrderInfo) => data.orderId.toString()\nconst getOrderSliceRowNodeId = (data: OrderInfo) => data.sliceId?.toString()\nconst getRowStyle = (params: RowClassParams): RowStyle => {\n    const style: React.CSSProperties = {}\n    const orderInfo: OrderInfo = params.data\n    if (orderInfo.tradeStatus === 'Done') {\n        style.opacity = 0.6\n    } else {\n        style.opacity = 1\n    }\n    return style as RowStyle\n}\n\nconst getMockTime = (date: Date, offset: number): Date => {\n    return new Date(date.getTime() + offset)\n}\n\nconst switchHashToOrders = () => {\n    window.location.hash = HASH_ORDERS\n}\n\nconst switchHashToHistory = () => {\n    window.location.hash = HASH_ORDER_HISTORY\n}\n\nlet glue: GlueApiT | undefined = undefined\n\nconst ActiveOrdersGrid = (props: OrderGridParam): JSX.Element => {\n    // console.log(\"ActiveOrdersGrid()\")\n    const { urlHash, urlFromDate, urlToDate } = parseUrl(window.location.href)\n    const historyView = urlHash === HASH_ORDER_HISTORY\n\n    const { getOrders, getOrdersHistory, getOrderSlices } = useOrders()\n    const asOfDateRef = useRef<Date>()\n\n    glue = useContext(GlueContext)\n\n    const grid = useGridHelper()\n    ;(window as any).grid = grid\n\n    const [rowData, setRowData] = useState<OrderInfo[]>()\n    const [time, setTime] = useState(new Date())\n    const [timeOffset, setTimeOffset] = useState(0)\n\n    const [filtFromDate, setFiltFromDate] = useState(\n        props.historyFilter?.fromDate || new Date()\n    )\n    const [filtToDate, setFiltToDate] = useState(\n        props.historyFilter?.toDate || new Date()\n    )\n    const [filtClientId, setFiltClientId] = useState(\n        props.historyFilter?.clientId || ''\n    )\n    const [filtSecurityId, setFiltSecurityId] = useState(\n        props.historyFilter?.securityId\n    )\n\n    const clients = useClients()\n    const orderSides = useOrderSides()\n    const orderTypes = useOrderTypes()\n    const orderValidity = useOrderValidity()\n    const { syncInstrument } = useMorningStarSync()\n    const { publishInstrument } = useEntityPublisher(glue)\n    const viewInstrument = useViewInstrument()\n\n    useEffect(() => {\n        const handler = () => setTime(new Date())\n        window.addEventListener('hashchange', handler)\n        return () => window.removeEventListener('hashchange', handler)\n    }, [])\n\n    useEffect(() => {\n        const myFromDate = new Date(urlFromDate)\n        const myToDate = new Date(urlToDate)\n        if (!isNaN(myFromDate.getTime())) setFiltFromDate(myFromDate)\n        if (!isNaN(myToDate.getTime())) setFiltToDate(myToDate)\n    }, [urlFromDate, urlToDate])\n\n    useEffect(() => {\n        props.historyFilter?.fromDate &&\n            setFiltFromDate(props.historyFilter.fromDate)\n\n        props.historyFilter?.toDate && setFiltToDate(props.historyFilter.toDate)\n\n        props.historyFilter?.clientId != null &&\n            setFiltClientId(props.historyFilter.clientId)\n\n        props.historyFilter?.securityId != null &&\n            setFiltSecurityId(props.historyFilter.securityId)\n\n        props.historyFilter?.switchView &&\n            (window.location.hash = HASH_ORDER_HISTORY)\n    }, [props.historyFilter])\n\n    useEffect(() => {\n        if (!historyView) {\n            glue?.windows.my().setTitle('Acme Orders')\n            const timer = setInterval(() => {\n                setTime(new Date())\n            }, 5000)\n            return () => clearInterval(timer)\n        } else {\n            glue?.windows.my().setTitle('Acme Order History')\n        }\n    }, [historyView])\n\n    // Get orders as of some date.\n    useEffect(() => {\n        if (historyView) return\n\n        const asOfDate = getMockTime(time, timeOffset)\n        asOfDateRef.current = asOfDate\n        getOrders(asOfDate).then((orders: OrderInfo[]) => setRowData(orders))\n    }, [time, timeOffset, historyView, getOrders])\n\n    // Get orders in a range of time when filter changed.\n    useEffect(() => {\n        if (!historyView) {\n            return\n        }\n        ;(async () => {\n            let ordersHistory = await getOrdersHistory({\n                from: filtFromDate,\n                to: filtToDate,\n            })\n\n            if (filtClientId) {\n                ordersHistory = ordersHistory.filter(\n                    (order: OrderInfo) => order.clientId === filtClientId\n                )\n            }\n            if (filtSecurityId) {\n                let re_security: RegExp\n                try {\n                    re_security = new RegExp('^' + filtSecurityId.ticker, 'i')\n                } catch (e) {\n                    re_security = new RegExp('not matching')\n                }\n                ordersHistory = ordersHistory.filter((order: OrderInfo) =>\n                    order.instrument.ticker.match(re_security)\n                )\n            }\n\n            setRowData(ordersHistory)\n        })()\n    }, [\n        filtFromDate,\n        filtToDate,\n        filtClientId,\n        filtSecurityId,\n        historyView,\n        getOrdersHistory,\n    ])\n\n    const onInstrumentReceived = useCallback(\n        (instrument: string) => {\n            const ticker = getTickerFromString(instrument)\n            const selectedNodes = grid?.api?.getSelectedNodes()\n            if (selectedNodes?.length === 1) {\n                const node = selectedNodes[0]\n                if (node.data?.instrument?.ticker !== ticker) {\n                    node.setSelected(false)\n                }\n            }\n        },\n        [grid]\n    )\n\n    const onNewOrderClick = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => {\n            ///const myInstance = glue?.interop.instance.instance\n            if (e.ctrlKey || !props.setNewOrderView) {\n                const order: Fdc3Order = e.shiftKey\n                    ? {\n                          type: 'fdc3.order',\n                          side: '2',\n                          contact: {\n                              type: 'fdc3.contact',\n                              name: 'CNAME',\n                              id: {\n                                  email: 'a@b.com',\n                              },\n                          },\n                          instrument: {\n                              type: 'fdc3.instrument',\n                              name: 'instrument name',\n                              id: {\n                                  ticker: 'DGE',\n                                  RIC: 'DGE LN',\n                              },\n                          },\n                          quantity: 123,\n                          orderType: '1', // FIX OrdType <40>\n                          limitPrice: 42.42, // only valid when orderType is limit\n                          timeInForce: '0', // FIX TimeInForce <59>\n                          expireTime: '2020-09-01T08:00:00.000Z',\n                          //expireTime: undefined as any,\n                          notes: 'low touch',\n                      }\n                    : { type: 'fdc3.order' }\n                glue?.intents.raise({\n                    intent: 'NewOrder',\n                    context: {\n                        type: 'fdc3.order',\n                        data: order,\n                    },\n                    //...(myInstance && {target:{instance: myInstance}})\n                    target: 'reuse',\n                })\n            } else {\n                props.setNewOrderView(true)\n            }\n        },\n        [props]\n    )\n\n    /*\n  const updateOrders = async () => {\n    console.log(\"updateOrders()\")\n    const orders = await getOrders(getMockTime(time,timeOffset))\n    setRowData(orders)\n  \n    //const myTransaction = {update: getOrderData()}\n    //grid.api?.applyTransactionAsync(myTransaction)\n  }\n  */\n\n    const onRowDataUpdated = useCallback(\n        (params: any) => {\n            console.log(params)\n\n            if ((window as any).dummyNonExistent) {\n                // disabled\n                const rowNode1 = grid.api?.getDisplayedRowAtIndex(4)\n                console.log('node1:', rowNode1)\n                if (rowNode1) {\n                    grid.api?.flashCells({\n                        rowNodes: [rowNode1],\n                        flashDelay: 200,\n                        fadeDelay: 500,\n                    })\n                }\n            }\n        },\n        [grid]\n    )\n\n    const onRowClicked = useCallback(\n        (event: { data: OrderInfo; api: GridApi }) => {\n            if (event.data == null) {\n                return\n            }\n            // sync BMLL on left click\n            const order = event.data\n\n            glue?.interop\n                .invoke(METHODNAME_PRETRADE_BMLL, {\n                    ticker: formatInstrumentFromId(order.instrument),\n                    instruments: [formatInstrumentFromId(order.instrument)],\n                }, 'all')\n                .then((/*result*/) => {\n                    console.log('BMLL Vantage left click sync successful')\n                })\n                .catch((e) => {\n                    console.log('BMLL Vantage left click sync failed', e)\n                })\n\n            const selectedNodes = event.api.getSelectedNodes()\n\n            if (selectedNodes.length > 1) {\n                console.log(\n                    'Multiple selection. Will not publish instrument or contact'\n                )\n                return\n            }\n\n            publishInstrument(event.data.instrument)\n\n            syncInstrument(event.data.instrument.ticker)\n\n            viewInstrument(event.data.instrument)\n\n            const clientId = event.data?.clientId\n\n            const ctx = {\n                type: 'fdc3.order',\n                id: event.data.orderId,\n                createTime: event.data.dateCreated,\n            }\n\n            glue?.intents\n                .raise({\n                    intent: INTENT_VIEW_ORDER_TRADE_HISTORY,\n                    context: {\n                        type: ctx.type,\n                        data: ctx,\n                    },\n                    target: 'reuse',\n                })\n                .catch(console.error)\n\n            const client = clients?.find(\n                (c: ClientInfo) => c.clientId === clientId\n            )\n            if (client) {\n                glue?.interop\n                    .invoke(\n                        // TODO: Changed to ACME method for conference demos.\n                        METHODNAME_ACME_SYNC_CONTACT,\n                        {\n                            contact: {\n                                ids: [\n                                    {\n                                        systemName: SF_SYSTEM_NAME,\n                                        nativeId: client.salesforceId,\n                                    },\n                                ],\n                                emails: [client.email],\n                            },\n                        },\n                        'skipMine'\n                    )\n                    .catch(console.error)\n            }\n        },\n        [clients, publishInstrument, syncInstrument]\n    )\n\n    const getContextMenuItems = useCallback(\n        (params: GetContextMenuItemsParams): (string | MenuItemDef)[] => {\n            const nodes = getRelevantContextNodes(params)\n            if (nodes.length <= 0) {\n                return []\n            }\n\n            const instrumentsToPush = nodes.map(\n                ({\n                    data: {\n                        instrument: { ticker, bbgExchange },\n                    },\n                }: {\n                    data: OrderInfo\n                }) => ({\n                    ticker,\n                    bbgExchange,\n                })\n            )\n            const firstOrder: OrderInfo = nodes[0].data\n            const result: MenuItemDef[] = [\n                //TODO: Rework trade history intent listener so that it can be passed in multiple orders and display history for them\n                {\n                    name: 'View Executions',\n                    action: function () {\n                        glue?.intents.raise({\n                            intent: INTENT_VIEW_ORDER_TRADE_HISTORY,\n                            context: {\n                                type: 'fdc3.order',\n                                data: {\n                                    type: 'fdc3.order',\n                                    id: firstOrder.orderId,\n                                    createTime: firstOrder.dateCreated,\n                                },\n                            },\n                        })\n                    },\n                },\n                {\n                    name: 'Click for Pre-trade',\n                    action: () => {\n                        triggerPreTradeOrders(\n                            glue,\n                            nodes.map((node) => node.data)\n                        )\n                    },\n                },\n                {\n                    name: 'Click to Track',\n                    action: () => {\n                        pushToBbgWorksheet(\n                            instrumentsToPush,\n                            glue,\n                            BBG_WORKSHEET_NAME\n                        )\n                    },\n                },\n            ]\n            return result\n        },\n        []\n    )\n\n    let pageHeader = undefined\n    if (historyView) {\n        pageHeader = (\n            <div className=\"d-flex align-items-center justify-content-between pb-3\">\n                <OrderFilters\n                    fromDate={filtFromDate}\n                    setFromDate={setFiltFromDate}\n                    toDate={filtToDate}\n                    setToDate={setFiltToDate}\n                    clientId={filtClientId}\n                    setClientId={setFiltClientId}\n                    securityId={filtSecurityId}\n                    setSecurityId={setFiltSecurityId}\n                />\n                <Button onClick={switchHashToOrders}>Current</Button>\n            </div>\n        )\n    } else {\n        pageHeader = (\n            <div className=\"d-flex align-items-center justify-content-between mb-2\">\n                <div className=\"d-flex align-items-center\">\n                    {!isGlue42Enterprise && <ChannelSelector baseSize={null} />}\n                    <Button className=\"mx-2\" onClick={onNewOrderClick}>\n                        &#x2795;&nbsp;Order&nbsp;Entry\n                    </Button>\n                    <Button onClick={switchHashToHistory}>Order History</Button>\n                </div>\n                <DateManipulator\n                    glue={glue}\n                    time={time}\n                    timeOffset={timeOffset}\n                    setTimeOffset={setTimeOffset}\n                />\n            </div>\n        )\n    }\n\n    const gridContext = {\n        sidesMap: orderSides,\n        orderTypeMap: orderTypes,\n        orderValidityMap: orderValidity,\n    }\n\n    return (\n        <>\n            <div className=\"active-orders-grid d-flex flex-column flex-grow-1\">\n                {pageHeader}\n                <div className=\"ag-tick42 flex-grow-1\">\n                    <AgGridReact\n                        masterDetail={true}\n                        detailRowAutoHeight={true}\n                        detailCellRendererParams={{\n                            template: ({ data }: any) => {\n                                if (data.split && data.split.length > 0) {\n                                    return (\n                                        '<div class=\"p-4\">' +\n                                        '  <div ref=\"eDetailGrid\"></div>' +\n                                        '</div>'\n                                    )\n                                }\n\n                                return `<div class=\"text-center p-4\">\n                        <span>\n                          <span class=\"tick42-custom-icon icon-warning icon-size-16\">\n                              <i class=\"icon-info-circled\"></i>\n                          </span>\n                        </span>\n                        <span class=\"ml-1\">No Slices</span>\n                      </div>`\n                            },\n                            refreshStrategy: 'rows',\n                            detailGridOptions: {\n                                immutableData: true,\n                                getRowNodeId: getOrderSliceRowNodeId,\n                                columnDefs: columnDefsSlices,\n                                defaultColDef: { ...defaultColumnDef, flex: 1 },\n                                context: gridContext,\n                            },\n                            getDetailRowData: ({\n                                data,\n                                successCallback,\n                            }: {\n                                data: OrderInfo\n                                successCallback: (data: OrderSlice[]) => void\n                            }) => {\n                                let date = asOfDateRef.current as Date\n\n                                if (historyView) {\n                                    const toDateBasis = DateEndOfDay(\n                                        data.dateCreated\n                                    )\n                                    if (!DateIsSameDay(toDateBasis, date)) {\n                                        date = toDateBasis\n                                    }\n                                }\n\n                                getOrderSlices(data.orderId, date)\n                                    .then(successCallback)\n                                    .catch(() => successCallback([]))\n                            },\n                        }}\n                        defaultColDef={defaultColumnDef}\n                        rowData={rowData}\n                        context={gridContext}\n                        immutableData={true}\n                        rowSelection={'multiple'}\n                        getRowNodeId={getOrderRowNodeId}\n                        getRowStyle={getRowStyle}\n                        suppressContextMenu={false}\n                        allowContextMenuWithControlKey={true}\n                        getContextMenuItems={getContextMenuItems}\n                        //onRowDataUpdated={onRowDataUpdated}\n                        onRowDataChanged={onRowDataUpdated}\n                        onRowClicked={onRowClicked}\n                        columnDefs={columnDefsOrders}\n                        onGridReady={grid.onGridReady}\n                        cellFlashDelay={200}\n                        cellFadeDelay={500}\n                    ></AgGridReact>\n                </div>\n            </div>\n            <ContextHandler\n                instrumentSetter={onInstrumentReceived}\n            ></ContextHandler>\n        </>\n    )\n}\n\n//export default React.forwardRef(ActiveOrdersGrid)\nexport default ActiveOrdersGrid\n","import { METHODNAME_PRETRADE_ABELNOSER, METHODNAME_PRETRADE_BMLL, METHODNAME_PRETRADE_VIRTU } from '../constants/methods'\nimport { OrderInfo } from '../models/orders'\nimport { GlueT } from './glue'\nimport { formatInstrumentFromId } from './util'\n\nexport const triggerPreTradeOrders = (\n    glue: GlueT | undefined,\n    orders: OrderInfo[]\n): void => {\n    console.log('orders', orders)\n\n    const firstOrder = orders[0]\n\n    // BMLL\n    {\n        glue?.interop\n            .invoke(METHODNAME_PRETRADE_BMLL, {\n                ticker: formatInstrumentFromId(firstOrder.instrument),\n                instruments: orders.map(order =>\n                    formatInstrumentFromId(order.instrument)\n                )\n            }, 'all')\n            .then((/*result*/) => {\n                console.log('BMLL sync successful')\n            })\n            .catch((e) => {\n                console.log('BMLL sync failed', e)\n            })\n    }\n\n    // Abel Noser\n    {\n        const anSide =\n            firstOrder.side === '2' || firstOrder.side === '5' ? 'S' : 'B'\n        glue?.interop\n            .invoke(METHODNAME_PRETRADE_ABELNOSER, {\n                fid: firstOrder.instrument?.ticker,\n                currency: firstOrder.currency,\n                orderId: firstOrder.orderId,\n                side: anSide,\n                quantity: firstOrder.quantity,\n            })\n            .then((/*result*/) => {\n                console.log('Abel Noser sync successful')\n            })\n            .catch((e) => {\n                console.log('Abel Noser sync failed', e)\n            })\n    }\n\n    // Virtu\n    {\n        const filters = []\n        for (const order of orders) {\n            const side =\n                order.side === '2' || order.side === '5' ? 'sell' : 'buy'\n\n            filters.push({\n                side,\n                quantity: order.quantity,\n                symbol: formatInstrumentFromId(order.instrument),\n                symbolType: 'bloombergMarketSymbol',\n                itgMarketLevelId: '1000000000999999',\n            })\n        }\n\n        glue?.interop\n            .invoke(METHODNAME_PRETRADE_VIRTU, { filters })\n            .then((/*result*/) => {\n                console.log('Virtu sync successful')\n            })\n            .catch((e) => {\n                console.log('Virtu sync failed', e)\n            })\n    }\n}\n","import { Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap';\n\nexport default function TradeDialog(props: NewOrderDialogProps): JSX.Element {\n  return (\n    <Modal size=\"lg\"\n      isOpen={true}\n      modalTransition={{ timeout: 0 }}\n      centered\n    >\n      <ModalHeader>{props.modalHeader}</ModalHeader>\n      <ModalBody>\n        {props.form}\n      </ModalBody>\n      <ModalFooter>\n      </ModalFooter>\n    </Modal>\n  );\n}\n\nexport interface NewOrderDialogProps {\n    // onModalComplete: () => void\n    form: JSX.Element\n    modalHeader: string\n}\n","import { useCallback, useState } from 'react'\nimport { OrderFilterEx } from '../models/orders'\nimport { DateAddDays } from '../util/datetime'\nimport ActiveOrdersGrid from './ActiveOrdersGrid'\nimport NewOrderForm from './NewOrderForm'\nimport NewOrderModal from './NewOrderModal'\n\nexport interface OrdersPageProps {\n    historyFilter?: OrderFilterEx\n}\n\nconst defaultHistoryFilter = {\n    fromDate: DateAddDays(new Date(), -31),\n    toDate: DateAddDays(new Date(), -1),\n}\n\nexport default function OrdersPage(props: OrdersPageProps): JSX.Element {\n    const [newOrderView, setNewOrderView] = useState<boolean>(false)\n    const historyFilter = props.historyFilter || defaultHistoryFilter\n\n    const handleNewOrderComplete = useCallback(() => {\n        setNewOrderView(false)\n    }, [])\n\n    const newOrderForm = (\n        <NewOrderForm onComplete={() => handleNewOrderComplete()} />\n    )\n\n    return (\n        <div className=\"orders-page d-flex flex-column flex-grow-1\">\n            {newOrderView ? (\n                <NewOrderModal form={newOrderForm} modalHeader=\"Order Entry\" />\n            ) : null}\n            <ActiveOrdersGrid\n                setNewOrderView={setNewOrderView}\n                historyFilter={historyFilter}\n            />\n        </div>\n    )\n}\n","import { GlueContext } from '@glue42/react-hooks'\r\nimport { useCallback, useContext } from 'react'\r\nimport { getFdc3Instrument } from '../util/util'\r\nimport { InstrumentIdInternal } from '../models/orders'\r\nimport { ViewInstrumentIntent } from '../constants'\r\n\r\nexport default function useViewInstrument() {\r\n    const glue = useContext(GlueContext)\r\n\r\n    return useCallback(\r\n        (instrument: string | InstrumentIdInternal) => {\r\n            const fdc3Instrument = getFdc3Instrument(instrument)\r\n            if (fdc3Instrument) {\r\n                glue?.intents.raise({\r\n                    intent: ViewInstrumentIntent,\r\n                    context: {\r\n                        type: fdc3Instrument.type,\r\n                        data: fdc3Instrument,\r\n                    },\r\n                })\r\n            }\r\n        },\r\n        [glue]\r\n    )\r\n}\r\n","const MS_PER_DAY = 1000 * 60 * 60 * 24\n\nexport const DateAddDays = (date: Date, days: number): Date => {\n    const result = new Date(date)\n    result.setDate(result.getDate() + days)\n    return result\n}\n\nexport const DateAddSeconds = (date: Date, seconds: number): Date => {\n    const result = new Date(date)\n    result.setUTCSeconds(result.getUTCSeconds() + seconds)\n    return result\n}\n\nexport const DateStartOfDay = (date: Date): Date => {\n    const result = new Date(date)\n    result.setHours(0, 0, 0, 0)\n    return result\n}\n\nexport const DateEndOfDay = (date: Date): Date => {\n    const result = new Date(date)\n    result.setHours(23, 59, 59, 999)\n    return result\n}\n\nexport const DateGetDaysSpan = (from: Date, to: Date): number => {\n    const diff = DateStartOfDay(to).getTime() - DateStartOfDay(from).getTime()\n    return Math.round(diff / MS_PER_DAY) // rounding needed in case the dates span over a DST change\n}\n\nexport const DateIsValid = (date: Date | undefined): boolean => {\n    if (date) {\n        return !isNaN(date.getTime())\n    }\n    return false\n}\n\nexport const DateIsSameDay = (date1: Date, date2: Date): boolean => {\n    return (\n        date1 &&\n        date2 &&\n        date1.getDate() === date2.getDate() &&\n        date1.getMonth() === date2.getMonth() &&\n        date1.getFullYear() === date2.getFullYear()\n    )\n}\n\nexport const DateFromStringOrDate = (\n    date: Date | string | undefined\n): Date | undefined => {\n    let result: Date | undefined = undefined\n    if (date) {\n        if (date instanceof Date) {\n            DateIsValid(date) && (result = date)\n        } else if (typeof date === 'string') {\n            const myDate = new Date(date)\n            DateIsValid(myDate) && (result = myDate)\n        }\n    }\n    return result\n}\n\nexport const MDateAddDays = (date: Date, days: number): void => {\n    date.setDate(date.getDate() + days)\n}\n\nexport const MDateAddSeconds = (date: Date, seconds: number): void => {\n    date.setUTCSeconds(date.getUTCSeconds() + seconds)\n}\n"],"names":["glue","useState","channelData","setChannelData","contextData","setContextData","updaterId","setUpdaterId","useEffect","unsubscribe","undefined","console","log","channels","subscribe","channelHandler","e","error","data","context","obtainContextName","workspaceId","handleWindowAdded","win","s","id","windows","my","setWorkspaceId","setContextName","handleWindowRemoved","windowId","contextName","useGlueContext","unsubPromiseAdded","unsubPromiseRemoved","workspaces","onWindowAdded","w","onWindowRemoved","arg","then","catch","getMyWorkspace","myWs","instrumentExtractor","instrument","RIC","updateEntity","setter","refValues","triggers","conditions","initialValue","value","candidateValue","bUpdateFromChan","chan","bUpdateFromGlob","glob","bUpdateFromWs","ws","instrumentConditions","condMan","ContextUpdateHandler","props","instrumentSetter","useContext","GlueContext","refInstruments","useRef","useGlueWindowChannels","chanData","chanContextData","OMS_GLOBAL_DATA_CONTEXT_NAME","globContextData","useGlueWorkspaceContext","wsContextData","wsWorkspaceId","current","style","display","React","noneOption","label","color","listGlueChannels","list","i","length","meta","sleep","getDisplaySelectedOption","opt","CustomSelectOption","backgroundColor","bgColorChroma","chroma","isSelected","isFocused","textAlign","c","baseSize","CustomSelectControl","selectedVal","selectProps","lineHeight","padding","fontSize","cursor","userSelect","onClick","menuIsOpen","onMenuClose","onMenuOpen","onBlur","channelOptions","setChannelOptions","selectedChannel","setSelectedChannel","allChannels","cOptions","push","map","name","classNamePrefix","className","components","DropdownIndicator","IndicatorSeparator","Option","Control","styles","menu","width","options","menuPlacement","maxMenuHeight","onChange","sel","today","DateStartOfDay","Date","isDateInThePast","currentDate","isBefore","customStyles","minWidth","menuList","maxHeight","clients","useClients","instruments","useInstruments","clientOptions","Object","entries","val","clientId","unshift","securityOptions","ticker","bbgExchange","formatInstrument","sort","a","b","selectedClient","find","selectedSecurity","securityId","fromDate","date","setFromDate","valueOf","dateFormat","timeFormat","closeOnSelect","inputProps","height","placeholder","readOnly","isValidDate","toDate","setToDate","setClientId","setSecurityId","invokeGetOrders","args","interop","invoke","METHODNAME_GET_ORDERS","result","returned","orders","invokeGetOrderById","METHODNAME_GET_ORDER","getOrderRowNodeId","orderId","toString","getOrderSliceRowNodeId","sliceId","getRowStyle","params","tradeStatus","opacity","switchHashToOrders","window","location","hash","HASH_ORDERS","switchHashToHistory","HASH_ORDER_HISTORY","url","replace","_","type","key","decodedKey","decodeURIComponent","decodedValue","capKey","toUpperCase","slice","hashMatch","match","parseUrl","href","urlHash","urlFromDate","urlToDate","historyView","getOrders","useCallback","asOfDate","withSlices","withTrades","getOrdersHistory","range","toDateBasis","to","setHours","accOrders","currentDay","counter","getTime","from","DateAddDays","getOrderSlices","slices","useOrders","asOfDateRef","grid","useGridHelper","rowData","setRowData","time","setTime","timeOffset","setTimeOffset","historyFilter","filtFromDate","setFiltFromDate","filtToDate","setFiltToDate","filtClientId","setFiltClientId","filtSecurityId","setFiltSecurityId","orderSides","useOrderSides","orderTypes","useOrderTypes","orderValidity","useOrderValidity","syncInstrument","useMorningStarSync","publishInstrument","useEntityPublisher","viewInstrument","useViewInstrument","handler","addEventListener","removeEventListener","myFromDate","myToDate","isNaN","switchView","setTitle","timer","setInterval","clearInterval","offset","ordersHistory","filter","order","re_security","RegExp","onInstrumentReceived","getTickerFromString","selectedNodes","api","getSelectedNodes","node","setSelected","onNewOrderClick","ctrlKey","setNewOrderView","shiftKey","side","contact","email","quantity","orderType","limitPrice","timeInForce","expireTime","notes","intents","raise","intent","target","onRowDataUpdated","dummyNonExistent","rowNode1","getDisplayedRowAtIndex","flashCells","rowNodes","flashDelay","fadeDelay","onRowClicked","event","METHODNAME_PRETRADE_BMLL","formatInstrumentFromId","ctx","createTime","dateCreated","INTENT_VIEW_ORDER_TRADE_HISTORY","client","METHODNAME_ACME_SYNC_CONTACT","ids","systemName","SF_SYSTEM_NAME","nativeId","salesforceId","emails","getContextMenuItems","nodes","getRelevantContextNodes","instrumentsToPush","firstOrder","action","anSide","METHODNAME_PRETRADE_ABELNOSER","fid","currency","filters","symbol","symbolType","itgMarketLevelId","METHODNAME_PRETRADE_VIRTU","triggerPreTradeOrders","pushToBbgWorksheet","BBG_WORKSHEET_NAME","pageHeader","isGlue42Enterprise","DateManipulator","gridContext","sidesMap","orderTypeMap","orderValidityMap","AgGridReact","masterDetail","detailRowAutoHeight","detailCellRendererParams","template","split","refreshStrategy","detailGridOptions","immutableData","getRowNodeId","columnDefs","columnDefsSlices","defaultColDef","defaultColumnDef","flex","getDetailRowData","successCallback","DateEndOfDay","DateIsSameDay","rowSelection","suppressContextMenu","allowContextMenuWithControlKey","onRowDataChanged","columnDefsOrders","onGridReady","cellFlashDelay","cellFadeDelay","ContextHandler","TradeDialog","size","isOpen","modalTransition","timeout","centered","modalHeader","form","defaultHistoryFilter","OrdersPage","newOrderView","handleNewOrderComplete","newOrderForm","NewOrderForm","onComplete","fdc3Instrument","getFdc3Instrument","ViewInstrumentIntent","days","setDate","getDate","DateIsValid","date1","date2","getMonth","getFullYear","DateFromStringOrDate","myDate"],"sourceRoot":""}